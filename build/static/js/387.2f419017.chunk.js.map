{"version":3,"file":"static/js/387.2f419017.chunk.js","mappings":"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","sources":["views/app-views/TaskManagement/Tasks/Tasks.js","views/app-views/TaskManagement/Schedule/event-utils.js","assets/svg/TaskManagement.svg","views/app-views/TaskManagement/Schedule/Schedule.js","views/app-views/TaskManagement/Tasks/JobSiteTasks.js","views/app-views/TaskManagement/AddNewTasks/index.js","views/app-views/TaskManagement/Tasks/JobCompletionReportTable.js","views/app-views/TaskManagement/Tasks/TaskCompletionReport.js","views/app-views/TaskManagement/Tasks/TaskCompletionReportInDetail.js","views/app-views/TaskManagement/Tasks/JobSiteTaskDetails.js","views/app-views/TaskManagement/ViewDetail/ViewTask.js","webpack://emilus/./src/views/app-views/TaskManagement/TaskReport/TaskReport.module.css?0fd4","views/app-views/TaskManagement/TaskReport/TaskReport.js","views/app-views/TaskManagement/Taskmanagement.js"],"sourcesContent":["import { Button, Space, Select, Drawer } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport SearchBox from 'components/shared-components/SearchBox';\r\nimport exportIcon from \"assets/svg/exportIcon.svg\";\r\nimport PageHeading from 'components/shared-components/PageHeading/PageHeading';\r\nimport TaskTable from './TaskTable';\r\nimport axios from 'axios';\r\nimport { CSVLink } from \"react-csv\";\r\nimport moment from \"moment\";\r\nimport { FilterIcon } from \"assets/svg/icon\";\r\nimport Icon from \"@ant-design/icons\"\r\n\r\n// import TaskManagement from \"assets/svg/TaskManagement.svg\";\r\n// import { Link } from 'react-router-dom';\r\n// import filterIcon from \"assets/svg/filterIcon.svg\";\r\n// import Filter from 'views/app-views/UserManagement/UserList/Filter';\r\n\r\n\r\nfunction Tasks() {\r\n  // const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchText, setSearchText] = useState('')\r\n  const [allContractsData, setAllContractsData] = useState([]);\r\n\r\n  const [selectedCustomerFilter , setSelectedCustomerFilter] = useState(false);\r\n  const [selectedJobsiteFilter , setSelectedJobsiteFilter] = useState(false);\r\n  const [selectedStatusFilter , setSelectedStatusFilter] = useState(false);\r\n  const [selectedFilter , setSelectedFilter] = useState(false);\r\n  const [allJobsites , setAllJobsites] = useState(false);\r\n  const [allCustomers , setAllCustomers] = useState(false);\r\n  \r\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n  const headers = [\r\n    { label: \"Contract ID\", key: \"id\" },\r\n    { label: \"Customer Name\", key: \"customer_name\" },\r\n    { label: \"Jobsite\", key: \"jobsite_name\" },\r\n    { label: \"No of Tasks\", key: \"total_tasks\" },\r\n    { label: \"Staff Assigned\", key: \"total_Staffs\" },\r\n    { label: \"Status\", key: \"status\" }\r\n  ];\r\n\r\n  const drawerHandler = () => {\r\n    setDrawerIsOpen((prevState) => {\r\n      console.log(\"Drawer \" + (!prevState ? 'Open':'Closed'));\r\n\r\n      return !prevState\r\n    });\r\n    // setDrawerIsOpen(true);\r\n  };\r\n\r\n  const handleDrawerOk = () => {\r\n    setSelectedFilter((previousState) => !previousState)\r\n    // if(selectedCustomerFilter || selectedJobsiteFilter || selectedStatusFilter) {\r\n    // } else setSelectedFilter(false);\r\n    setDrawerIsOpen(false);\r\n  };\r\n\r\n  const onDrawerClose = () => {\r\n    console.log(\"Closed\")\r\n    setDrawerIsOpen(false);\r\n  };\r\n\r\n  const handleDrawerReset = () => {\r\n    setSelectedFilter((previousState) => !previousState)\r\n    setSelectedCustomerFilter(false)\r\n    setSelectedJobsiteFilter(false)\r\n    setSelectedStatusFilter(false)\r\n\r\n    setDrawerIsOpen(false);\r\n  };\r\n\r\n  const getAllJobsites = () => {\r\n    axios({\r\n      method: 'post',\r\n      url: \"/api/tc/get-customer-job-sites\",\r\n      data: {\r\n        page_index: 1,\r\n        page_size: 100000,\r\n        customer_id: null,\r\n        search : null\r\n      }\r\n    }).then((response) => {\r\n        if (response.data.success) {\r\n          setAllJobsites(response.data.data.data)\r\n        }\r\n        console.log(\"Job sites data fetched\")\r\n        console.log(response.data.data.data)\r\n    }).catch((err) => {\r\n        console.log(err)\r\n    });\r\n  };\r\n  \r\n  const getAllCustomers = () => {\r\n    axios({\r\n      method: 'post',\r\n      url: \"/api/tc/get-customers\",\r\n      data: {\r\n        page_index: 1,\r\n        page_size: 100000,\r\n        customer_id: null,\r\n        search : null\r\n      }\r\n    }).then((response) => {\r\n        if (response.data.success) {\r\n          setAllCustomers(response.data.data.data)\r\n        }\r\n        console.log(\"Customers data fetched\")\r\n        console.log(response.data.data.data)\r\n    }).catch((err) => {\r\n        console.log(err)\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n    .post(\r\n      \"/api/tc/get-contracts\",\r\n      {\r\n        page_index: 1,\r\n        page_size: 100000,\r\n        search : null,\r\n      },\r\n    )\r\n    .then((response) => {\r\n      let res = response.data.data.data;\r\n\r\n      let fdata = res.map((elem, index) => {\r\n        return {\r\n          key: elem.id,\r\n          id: elem.id,\r\n          customer_name: elem.customer_name || elem.tc_customer_id,\r\n          jobsite_name: elem.job_site_name,\r\n          contract_type: elem.type,\r\n          commence_on: moment(elem.start_date).format(\"DD-MM-YYYY\"),\r\n          expire_on: moment(elem.end_date).format(\"DD-MM-YYYY\"),\r\n          contract_type: elem.type,\r\n          total_tasks: elem.total_tasks  || 0,\r\n          total_staffs: elem.total_staffs  || 0,\r\n          status: elem.status || 'Expired',\r\n        };\r\n      });\r\n\r\n      setAllContractsData(fdata);\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n\r\n    getAllCustomers();\r\n    getAllJobsites();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className='d-flex justify-content-between'>\r\n        <PageHeading\r\n          // icon={TaskManagement}\r\n          title=\"Customer Tasks\"\r\n        />\r\n        <div className=\"d-flex justify-content-between mb-3\">\r\n          <div className=\" d-flex align-items-center justify-content-between\">\r\n            <SearchBox setSearchText={setSearchText}/>\r\n\r\n            <Button className=\"d-flex align-items-center ml-2\" onClick={drawerHandler}>\r\n              <Icon className=\"mr-2\" component={FilterIcon} />\r\n              Filters\r\n            </Button>\r\n\r\n            <CSVLink data={allContractsData} \r\n              headers={headers} \r\n              filename={\"All-Quotations.csv\"}\r\n            >\r\n              <Button className=\"d-flex align-items-center ml-2\" >\r\n                <img className=\"mr-2\" src={exportIcon} alt=\"exportIcon\"></img>Export\r\n              </Button>\r\n            </CSVLink>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <TaskTable searchText={searchText} selectedCustomerFilter={selectedCustomerFilter} \r\n        selectedJobsiteFilter={selectedJobsiteFilter} selectedStatusFilter={selectedStatusFilter} \r\n        selectedFilter={selectedFilter} />\r\n      </div>\r\n\r\n      <div>\r\n      <Drawer title=\"Filter\"\r\n          placement=\"right\"\r\n          onClose={onDrawerClose} \r\n          open={drawerIsOpen}\r\n          closable={true}\r\n          // getContainer={false}\r\n          visible={drawerIsOpen}\r\n          footer={[\r\n            <Button key={'submit'} style={{ color: '#F5F5F5' }} type=\"primary\" className='font-weight-bold mr-2' onClick={handleDrawerOk}>Apply</Button>,\r\n            <Button key={'cancel'} style={{ color: '#000B23' }} onClick={() => {handleDrawerReset()}} className='font-weight-bold'>Reset</Button>,\r\n          ]}\r\n        >\r\n          <div className=\"mb-2\">\r\n            <h4>Customer</h4>\r\n            <Select\r\n                showSearch\r\n                placeholder=\"Jobsite\"\r\n                // optionFilterProp=\"children\"\r\n                // filterOption={(input, option) => (option?.title ?? '').toString().toLowerCase()?.includes(input?.toLowerCase())}\r\n                // filterSort={(optionA, optionB) =>\r\n                //     (optionA?.label ?? '').toString().toLowerCase().localeCompare((optionB?.label ?? '').toString().toLowerCase())\r\n                // }\r\n                value={selectedCustomerFilter}\r\n                onChange={(e) => {setSelectedCustomerFilter(e)}}\r\n                className=\"w-100\"\r\n            >\r\n                <Select.Option title={'None'} key={'None'} value={null}>{'None'}</Select.Option>\r\n                {allCustomers && allCustomers.map((val, id) => (\r\n                    <Select.Option title={val.name} key={id} value={val?.id}>{val.name}</Select.Option>\r\n                ))}\r\n            </Select>\r\n          </div>\r\n          <div className=\"mb-2\">\r\n            <h4>Jobsite</h4>\r\n            <Select\r\n                showSearch\r\n                placeholder=\"Jobsite\"\r\n                value={selectedJobsiteFilter}\r\n                onChange={(e) => {setSelectedJobsiteFilter(e)}}\r\n                className=\"w-100\"\r\n            >    \r\n                <Select.Option title={'None'} key={'None'} value={null}>{'None'}</Select.Option>\r\n                {allJobsites && allJobsites.map((val, id) => (\r\n                    <Select.Option title={val.name} key={id} value={val?.id}>{val.name}</Select.Option>\r\n                ))}\r\n            </Select>\r\n          </div>\r\n          <div>\r\n            <h4>Status</h4>\r\n            <Select\r\n                showSearch\r\n                placeholder=\"Status\"\r\n                value={selectedStatusFilter}\r\n                onChange={(e) => {setSelectedStatusFilter(e)}}\r\n                className=\"w-100\"\r\n            >\r\n                <Select.Option title={'None'} key={'None'} value={null}>{'None'}</Select.Option>\r\n                <Select.Option title={'Active'} key={'Active'} value={'Active'}>{'Active'}</Select.Option>\r\n                <Select.Option title={'Expired'} key={'Expired'} value={'Expired'}>{'Expired'}</Select.Option>\r\n            </Select>\r\n          </div>\r\n        </Drawer>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Tasks","\r\nlet eventGuid = 0\r\nlet todayStr = new Date().toISOString().replace(/T.*$/, '') // YYYY-MM-DD of today\r\n\r\nexport const INITIAL_EVENTS = [\r\n  {\r\n    id: createEventId(),\r\n    title: 'All-day event',\r\n    start: todayStr\r\n  },\r\n  {\r\n    id: createEventId(),\r\n    title: 'Timed event',\r\n    start: todayStr + 'T12:00:00'\r\n  }\r\n]\r\n\r\nexport function createEventId() {\r\n  return String(eventGuid++)\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgTaskManagement(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 17,\n    viewBox: \"0 0 18 17\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.4917 0.166992H5.50832C2.47499 0.166992 0.666656 1.97533 0.666656 5.00866V11.992C0.666656 15.0253 2.47499 16.8337 5.50832 16.8337H12.4917C15.525 16.8337 17.3333 15.0253 17.3333 11.992V5.00866C17.3333 1.97533 15.525 0.166992 12.4917 0.166992ZM7.30832 10.917L5.43332 12.792C5.30832 12.917 5.14999 12.9753 4.99166 12.9753C4.83332 12.9753 4.66666 12.917 4.54999 12.792L3.92499 12.167C3.67499 11.9253 3.67499 11.5253 3.92499 11.2837C4.16666 11.042 4.55832 11.042 4.80832 11.2837L4.99166 11.467L6.42499 10.0337C6.66666 9.79199 7.05832 9.79199 7.30832 10.0337C7.54999 10.2753 7.54999 10.6753 7.30832 10.917ZM7.30832 5.08366L5.43332 6.95866C5.30832 7.08366 5.14999 7.14199 4.99166 7.14199C4.83332 7.14199 4.66666 7.08366 4.54999 6.95866L3.92499 6.33366C3.67499 6.09199 3.67499 5.69199 3.92499 5.45033C4.16666 5.20866 4.55832 5.20866 4.80832 5.45033L4.99166 5.63366L6.42499 4.20033C6.66666 3.95866 7.05832 3.95866 7.30832 4.20033C7.54999 4.44199 7.54999 4.84199 7.30832 5.08366ZM13.6333 12.3503H9.25832C8.91666 12.3503 8.63332 12.067 8.63332 11.7253C8.63332 11.3837 8.91666 11.1003 9.25832 11.1003H13.6333C13.9833 11.1003 14.2583 11.3837 14.2583 11.7253C14.2583 12.067 13.9833 12.3503 13.6333 12.3503ZM13.6333 6.51699H9.25832C8.91666 6.51699 8.63332 6.23366 8.63332 5.89199C8.63332 5.55033 8.91666 5.26699 9.25832 5.26699H13.6333C13.9833 5.26699 14.2583 5.55033 14.2583 5.89199C14.2583 6.23366 13.9833 6.51699 13.6333 6.51699Z\",\n    fill: \"#72849A\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTaskManagement);\nexport default __webpack_public_path__ + \"static/media/TaskManagement.f3ea012c292aab3806434a3452730fab.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from 'react'\r\nimport FullCalendar from '@fullcalendar/react' // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\r\nimport TaskManagement from \"assets/svg/TaskManagement.svg\";\r\nimport { Card, Input } from 'antd';\r\nimport PageHeading from 'components/shared-components/PageHeading/PageHeading';\r\nimport './Schedular.css'\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Schedule() {\r\n\r\n  const [weekendsVisible, setWeekendsVisible] = useState(true)\r\n  const [currentsEvents, setCurrentsEvents] = useState([])\r\n  const [eventData, setEventData] = useState([])\r\n  const tok = localStorage.getItem('token')\r\n  const [tasks, setTasks] = useState([])\r\n  const history = useHistory()\r\n\r\n  const handleDateSelect = (selectInfo) => {\r\n    // let title = prompt('Please enter a new title for your event')\r\n    let calendarApi = selectInfo.view.calendar\r\n\r\n    // calendarApi.unselect() // clear date selection\r\n\r\n    console.log(createEventId())\r\n    console.log(selectInfo.startStr)\r\n    console.log(selectInfo.endStr)\r\n    console.log(selectInfo.allDonay)\r\n\r\n    // if (title) {\r\n    //   calendarApi.addEvent({\r\n    //     id: createEventId(),\r\n    //     title,\r\n    //     start: selectInfo.startStr,\r\n    //     end: selectInfo.endStr,\r\n    //     allDay: selectInfo.allDay\r\n    //   })\r\n    // }\r\n  }\r\n\r\n  function convertTo24HourTime(isoDateString) {\r\n    const date = new Date(isoDateString);\r\n    const hours = date.getHours().toString().padStart(2, '0');\r\n    const minutes = date.getMinutes().toString().padStart(2, '0');\r\n    // const seconds = date.getSeconds().toString().padStart(2, '0');\r\n\r\n    return `${hours}:${minutes}`;\r\n  }\r\n\r\n\r\n  function renderEventContent(eventInfo) {\r\n    let startTime = (convertTo24HourTime(eventInfo.event.start))\r\n    let endTime = convertTo24HourTime(eventInfo.event.end)\r\n    console.log(eventInfo.event.extendedProps)\r\n    if (eventInfo.view.type === \"timeGridWeek\") {\r\n      return (\r\n        <div style={styles}>\r\n          {eventInfo.event.title}              {startTime} - {endTime}\r\n          <div style={{\r\n            padding:\"5px\"\r\n          }}> {\r\n            eventInfo.event.extendedProps.images.map((item, index) => {\r\n              return item && <img key={index} src={item} alt=\"profile\" style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }} />\r\n            })}\r\n          </div>\r\n        </div>\r\n        // <div style={{display:\"flex\",flexDirection:'row',gap:\"4px\"}}>\r\n        //   <div>{eventInfo.event.title} </div>\r\n        //   <div>{(eventInfo.timeText)}</div>\r\n        // </div>\r\n      )\r\n    }\r\n    else if (eventInfo.view.type === \"timeGridDay\") {\r\n      return (\r\n        <div style={styles}>\r\n          {eventInfo.event.title}-   {startTime} - {endTime}\r\n          <div style={{\r\n            padding:\"5px\"\r\n          }}> {\r\n            eventInfo.event.extendedProps.images.map((item, index) => {\r\n              return item && <img key={index} src={item} alt=\"profile\" style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div style={styles}>\r\n          {eventInfo.event.title}-    {startTime} - {endTime}\r\n          <div style={{\r\n            padding:\"5px\"\r\n          }}> {\r\n            eventInfo.event.extendedProps.images.map((item, index) => {\r\n              return item && <img key={index} src={item} alt=\"profile\" style={{ width: \"30px\", height: \"30px\", borderRadius: \"50%\" }} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    }\r\n  }\r\n\r\n  const handleEventClick = (clickInfo) => {\r\n    // if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n    //   clickInfo.event.remove()\r\n    // }\r\n    console.log(clickInfo.event._def)\r\n    let task = clickInfo.event._def.extendedProps\r\n    console.log(task);\r\n    let jobsiteIndex = getJobSiteIndex(task.cust_id, task.job_site_id)\r\n    let url = `/app/task-management/task/job-sites-tasks/${task.contract_id}`\r\n    history.push(url);\r\n\r\n  }\r\n\r\n  const handleEvents = (events) => {\r\n    console.log(events)\r\n    console.log(currentsEvents)\r\n\r\n    setCurrentsEvents(eventData)\r\n  }\r\n\r\n  // const onSearch = (value) => console.log(value);\r\n\r\n  const getTasks = () => {\r\n    axios({\r\n      method: 'post',\r\n      url: \"/api/tc/get-tasks\",\r\n      // headers: {\r\n      //   Authorization: `Bearer ${tok}`\r\n      // },\r\n      data: {\r\n        page_size: 100000,\r\n        job_site_id: null\r\n      }\r\n    }).then((response) => {\r\n      console.log(response.data.data)\r\n      let respData = response.data.data\r\n      let scheduleData = []\r\n      for (let data of respData) {\r\n        let dateStr = new Date(data.task_start_date_time).toISOString().replace(/T.*$/, '')\r\n        let obj = {\r\n          id: data.id,\r\n          title: data.task_name,\r\n          start: data.task_start_date_time,\r\n          end: data.task_end_date_time,\r\n          contract_id: data.tc_contract_id,\r\n          cust_id: data.tc_customer_id,\r\n          task_id: data.id,\r\n          // borderColor:\"red\",\r\n        color:\"#EAF2DD\",\r\n        textColor:\"#0369A1\",\r\n        borderColor: \" #97BE54\",\r\n          job_site_id: data.tc_customer_job_site_id,\r\n          serviceType: data.service_type,\r\n          images: data.users.map((item) => {\r\n            return item.profile_pic\r\n          })\r\n        }\r\n        scheduleData.push(obj)\r\n      }\r\n      // console.log(INITIAL_EVENTS)\r\n      // setTimeout(() => {\r\n      setEventData(scheduleData)\r\n      // }, 1500);\r\n      // if (response.data.success) {\r\n      //   setTasks(response.data.data.data)\r\n      // }\r\n      // alert(response.data.status)\r\n    }).catch((err) => {\r\n      console.log(err)\r\n    });\r\n  }\r\n\r\n  const getJobSiteIndex = (cust_id, job_site_id) => {\r\n    axios({\r\n      method: 'post',\r\n      url: \"/api/tc/get-customer-job-sites\",\r\n      headers: {\r\n        // 'content-type': `multipart/form-data`,\r\n        Authorization: `Bearer ${tok}`\r\n      },\r\n      data: { customer_id: cust_id }\r\n    }).then((response) => {\r\n      console.log(response.data)\r\n      if (response.data.success) {\r\n        console.log(response.data.data.data)\r\n        let idx = (response.data.data.data).findIndex(object => {\r\n          return object.id === job_site_id;\r\n        });\r\n        return idx\r\n      }\r\n    }).catch((err) => {\r\n      console.log(err)\r\n    });\r\n    return 0\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTasks()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    handleEvents()\r\n  }, [eventData])\r\n\r\n  return (\r\n    <div>\r\n      <PageHeading\r\n        icon={TaskManagement}\r\n        title=\"Task Management / Schedule\"\r\n      />\r\n      <Card>\r\n        {/* <div className='d-flex'>\r\n          <Input.Search\r\n            className='mb-2'\r\n            placeholder=\"Search\"\r\n            onSearch={onSearch}\r\n            style={{\r\n              width: 200,\r\n              marginLeft: \"auto\"\r\n            }}\r\n          />\r\n        </div> */}\r\n\r\n        <FullCalendar\r\n          height={\"auto\"}\r\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n          headerToolbar={{\r\n            left: 'today,prev,next',\r\n            center: 'timeGridDay,timeGridWeek,dayGridMonth',\r\n            right: \"title\",\r\n          }}\r\n          initialView='timeGridWeek'\r\n          editable={false}\r\n          selectable={true}\r\n          selectMirror={true}\r\n          dayMaxEvents={true}\r\n          weekends={weekendsVisible}\r\n          events={eventData}\r\n          select={handleDateSelect}\r\n          eventContent={renderEventContent}\r\n          eventClick={handleEventClick}\r\n          eventsSet={handleEvents}\r\n          eventChange={function (events) { console.log(events) }}\r\n\r\n        // initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n        //  you can update a remote database when these fire:\r\n        // eventAdd={function(){}}\r\n        // eventRemove={function(){}}\r\n        />\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Schedule\r\n\r\n\r\nconst styles = {\r\n  width: \"100%\", /* Set a fixed width for the container */\r\n  whiteSpace: \"nowrap\", /* Prevent the text from breaking to next line */\r\n  overflow: \"hidden\", /* Hide text that is outside the container */\r\n  textOverflow: \"ellipsis\", /* If text-overflow is clipped, a string (...) is inserted to represent clipped text */\r\n}","import PageHeading from 'components/shared-components/PageHeading/PageHeading'\r\nimport React, { useEffect, useState } from 'react'\r\nimport TaskManagement from \"assets/svg/TaskManagement.svg\";\r\nimport SearchBox from 'components/shared-components/SearchBox';\r\nimport { Avatar, Button, Modal, Menu, Table, Tabs, Dropdown, Card, Tag, Select, Drawer } from 'antd';\r\nimport filterIcon from \"assets/svg/filterIcon.svg\";\r\nimport exportIcon from \"assets/svg/exportIcon.svg\";\r\nimport plusIcon from \"assets/svg/plus.svg\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Filter from 'views/app-views/UserManagement/UserList/Filter';\r\nimport Action from './Action';\r\nimport { Successfully } from 'configs/svgIcons';\r\nimport SuccessSubmit from 'views/app-views/UserManagement/AddNewStaffV2/AsiignShift/SuccessSubmit';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { CSVLink } from 'react-csv';\r\nimport { FilterIcon } from \"assets/svg/icon\";\r\nimport Icon from \"@ant-design/icons\"\r\n\r\n\r\n\r\n\r\n\r\nfunction JobSiteTasks() {\r\n\r\n\r\n    const param = useParams()\r\n    const [searchText, setSearchText] = useState('')\r\n    const [allContractsData, setAllContractsData] = useState([]);\r\n    // console.log(searchText)\r\n    const [currActiveKey, setCurrActiveKey] = useState(\"1\");\r\n    const [current, setCurrent] = useState(['All'])\r\n    const [statusFilter, setStatusFilter] = useState([])\r\n    const [typeFilter, setTypeFilter] = useState([])\r\n    const [jobSiteTasksByCustomerIdData, setjobSiteTasksByCustomerIdData] = useState([])\r\n    const [contractData, setContractData] = useState({})\r\n    const [JobSiteID, setJobSiteID] = useState(null)\r\n    const tok = localStorage.getItem('token')\r\n    const headers = [\r\n        { label: \"Contract ID\", key: \"id\" },\r\n        { label: \"Customer Name\", key: \"customer_name\" },\r\n        { label: \"Jobsite\", key: \"jobsite_name\" },\r\n        { label: \"No of Tasks\", key: \"total_tasks\" },\r\n        { label: \"Staff Assigned\", key: \"total_Staffs\" },\r\n        { label: \"Status\", key: \"status\" }\r\n    ];\r\n\r\n    const [selectedStaffFilter , setSelectedStaffFilter] = useState(false);\r\n    const [selectedTaskTypeFilter , setSelectedTaskTypeFilter] = useState(false);\r\n    const [selectedFilter , setSelectedFilter] = useState(false);\r\n    const [allStaff , setAllStaff] = useState(false);\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Task ID',\r\n            dataIndex: 'id',\r\n        },\r\n        {\r\n            title: 'Task Name',\r\n            dataIndex: 'task_name',\r\n        },\r\n        {\r\n            title: 'Start Date',\r\n            dataIndex: 'task_start_date_time',\r\n            render: (text) => {\r\n                return <div>{new Date(text).toDateString()}</div>\r\n            }\r\n        },\r\n        {\r\n            title: 'End Date',\r\n            dataIndex: 'recur_until',\r\n            render: (text) => {\r\n                return <div>{new Date(text).toDateString()}</div>\r\n            }\r\n        },\r\n        {\r\n            title: 'Time',\r\n            dataIndex: '',\r\n            render: (record) => {\r\n                return (\r\n                    <div>{moment(record?.task_start_date_time, \"YYYY-MM-DD HH:mm:ss\").format(\"hh:mm A\")} - {moment(record?.task_end_date_time,\"YYYY-MM-DD HH:mm:ss\" ).format(\"hh:mm A\")}</div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: 'Task Type',\r\n            dataIndex: 'task_recurrence',\r\n        },\r\n        {\r\n            title: 'Staff Assign',\r\n            dataIndex: 'staffAssign',\r\n            render: (_, record) => {\r\n                return <Avatar.Group\r\n                    maxCount={2}\r\n                    maxPopoverTrigger=\"click\"\r\n                    size=\"large\"\r\n                    maxStyle={{\r\n                        color: '#f56a00',\r\n                        backgroundColor: '#fde3cf',\r\n                        cursor: 'pointer',\r\n                    }}\r\n                >\r\n                    {record?.staffs?.map((data, i) => {\r\n                        return <Avatar src={data?.profile_pic} />\r\n                    })}\r\n                </Avatar.Group>\r\n            }\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'task_status',\r\n            render: (_, record) => {\r\n                if (record.task_status === 'COMPLETED') return <span style={{ color: \"#00AB6F\", backgroundColor: \"#EDFFF9\", padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Completed</span>\r\n                else if (record.task_status === 'STARTED') return <span style={{ color: '#0077b6', backgroundColor: '#DEEFFF', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Started</span>\r\n                else if (record.task_status === 'PENDING') return <span style={{ color: '#F0A500', backgroundColor: '#FEF3DD', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Pending</span>\r\n                else return <span style={{ color: '#F53434', backgroundColor: '#FFF2F2', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>{record.task_status}</span>\r\n            }\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            render: (_, record) => {\r\n                return (\r\n                    <Action\r\n                        record={record}\r\n                        // dataSet={setjobSiteTasksByCustomerIdData}\r\n                        // Id='id'\r\n                        onDelete={deleteJobsiteTasks}\r\n                        index={currActiveKey}\r\n                        contractData={contractData}\r\n                        Id={record.id}\r\n                        CustomerName={contractData.customer_name}\r\n\r\n                    />\r\n                )\r\n            }\r\n        },\r\n    ]\r\n\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [cpage, setCpage] = useState(0)\r\n    const [showDeletedSuccess, setShowDeletedSuccess] = useState(false);\r\n    const [totalJobSite, setTotalJobSite] = useState([])\r\n\r\n    const getPdf = async () => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"/api/tc/get-tasks\",\r\n                {\r\n                    page_index: 1,\r\n                    page_size: 100000,\r\n                    job_site_id: JobSiteID,\r\n                    search: searchText ? searchText : null,\r\n                    export_type: \"pdf\",\r\n                },\r\n            );\r\n            console.log(response.data.url); // add this line to log the PDF URL\r\n            if (response.data.status) {\r\n                return response.data.url;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    async function downloadPDF() {\r\n        try {\r\n            const pdfUrl = await getPdf();\r\n            if (pdfUrl) {\r\n                window.open(pdfUrl);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error downloading PDF:\", error);\r\n        }\r\n    }\r\n\r\n\r\n    const selectChangeHandler = (newSelectedRowKeys) => {\r\n        console.log(\"selectedRowKeys changed: \", newSelectedRowKeys);\r\n        setSelectedRowKeys(newSelectedRowKeys);\r\n    };\r\n\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: selectChangeHandler,\r\n    };\r\n\r\n    const tabChangeHandler = (key) => {\r\n        setCurrActiveKey(key);\r\n        setStatusFilter([])\r\n        setTypeFilter([])\r\n        setCurrent([\"All\"])\r\n    };\r\n\r\n    // const getJobSiteTasks = () => {\r\n    //     axios({\r\n    //         method: 'post',\r\n    //         url: \"/api/tc/get-tasks\",\r\n    //         data: {\r\n    //             show_my_tasks: true,\r\n    //             show_staff_tasks: true,\r\n    //             page_size: 100000\r\n    //         },\r\n    //         headers: {\r\n    //             Authorization: `Bearer ${tok}`\r\n    //         },\r\n    //     }).then((response) => {\r\n    //         console.log(response.data.data.data)\r\n    //     });\r\n    // }\r\n\r\n    const deleteJobsiteTasks = (record, Id, index) => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/delete-task\",\r\n            headers: {\r\n                // 'content-type': `multipart/form-data`,\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: { id: record[Id] }\r\n        }).then((response) => {\r\n            console.log(response)\r\n            if (response.data.success) {\r\n                setjobSiteTasksByCustomerIdData((pre) => {\r\n                    return pre.filter((member) => member[Id] !== record[Id])\r\n                })\r\n\r\n                setShowDeletedSuccess(true)\r\n                setTimeout(() => {\r\n                    setShowDeletedSuccess(false)\r\n                }, 3000);\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n    const getContract = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-contract\",\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: { \r\n                id: param.id,\r\n                search_task: searchText,\r\n                task_staff_assigned: [selectedStaffFilter],\r\n                task_type: [selectedTaskTypeFilter],\r\n             }\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                setContractData(response.data.data)\r\n                setjobSiteTasksByCustomerIdData(response.data.data.tasks)\r\n                // setTotalJobSite(response.data.data.data)\r\n                // handleJobsiteChangeData(response.data.data.data[0].id)\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n\r\n    // const handleJobsiteChangeDataPagination = (id, currPage) => {\r\n    //     setJobSiteID(id)\r\n    //     console.log(\"jobsite_Id\", id)\r\n    //     axios({\r\n    //         method: 'post',\r\n    //         url: \"/api/tc/get-tasks\",\r\n    //         headers: {\r\n    //             Authorization: `Bearer ${tok}`\r\n    //         },\r\n    //         data: {\r\n    //             customer_id: +param?.id,\r\n    //             job_site_id: id,\r\n    //             page_index: currPage,\r\n    //             page_size: 15,\r\n    //             search: searchText ? searchText : null,\r\n    //             statuses: statusFilter,\r\n    //             task_recurrences: typeFilter,\r\n    //             show_my_tasks: true,\r\n    //             show_staff_tasks: true,\r\n    //             // task_date: moment(new Date())\r\n    //         }\r\n    //     }).then((response) => {\r\n    //         console.log(`response for job site ${id}`, response.data.data)\r\n    //         console.log(`current data for showing site ${id}`,)\r\n    //         if (currPage === 1) {\r\n    //             setjobSiteTasksByCustomerIdData(response.data.data);\r\n    //         } else {\r\n    //             // setjobSiteTasksByCustomerIdData([...jobSiteTasksByCustomerIdData,...response.data.data.data])\r\n    //             setjobSiteTasksByCustomerIdData(response.data.data);\r\n    //         }\r\n    //     }).catch((err) => {\r\n    //         console.log(err)\r\n    //     });\r\n    // }\r\n\r\n    const handlechange = (pagination) => {\r\n        if (cpage <= pagination.current) {\r\n            setPage(pagination.current)\r\n            setCpage(pagination.current)\r\n        }\r\n    }\r\n\r\n    const handleFilterClick = (e) => {\r\n        console.log(e)\r\n        setCurrent([e.key])\r\n        if (e.key !== 'All') {\r\n            if (e.key !== 'AllStatus' && (e.key === 'Completed' ||\r\n                e.key === 'Started' ||\r\n                e.key === 'Pending' ||\r\n                e.key === 'Overdue' ||\r\n                e.key === 'BLOCKER')) {\r\n                setStatusFilter([e.key])\r\n                console.log([e.key])\r\n            } else {\r\n                setStatusFilter([])\r\n            }\r\n\r\n            if (e.key !== 'AllType' && (e.key === 'Daily' ||\r\n                e.key === 'Weekly' ||\r\n                e.key === 'Monthly' ||\r\n                e.key === 'Yearly' ||\r\n                e.key === 'One Time')) {\r\n                setTypeFilter([e.key])\r\n                console.log([e.key])\r\n            } else {\r\n                setTypeFilter([])\r\n            }\r\n        } else {\r\n            setStatusFilter([])\r\n            setTypeFilter([])\r\n        }\r\n    }\r\n\r\n    const menuFilter = (\r\n        <Menu onClick={handleFilterClick} selectedKeys={current}>\r\n            <Menu.Item key={'All'}>All</Menu.Item>\r\n            <Menu.SubMenu title=\"Status\">\r\n                <Menu.Item key={'AllStatus'}>All</Menu.Item>\r\n                <Menu.Item key={'Completed'}>Completed</Menu.Item>\r\n                <Menu.Item key={'Started'}>Started</Menu.Item>\r\n                <Menu.Item key={'Pending'}>Pending</Menu.Item>\r\n                <Menu.Item key={'Overdue'}>Overdue</Menu.Item>\r\n                <Menu.Item key={'BLOCKER'}>Blocker</Menu.Item>\r\n            </Menu.SubMenu>\r\n            <Menu.SubMenu title=\"Task Type\">\r\n                <Menu.Item key={'AllType'}>All</Menu.Item>\r\n                <Menu.Item key={'Daily'}>Daily</Menu.Item>\r\n                <Menu.Item key={'Weekly'}>Weekly</Menu.Item>\r\n                <Menu.Item key={'Monthly'}>Monthly</Menu.Item>\r\n                <Menu.Item key={'Yearly'}>Yearly</Menu.Item>\r\n                <Menu.Item key={'One Time'}>One Time</Menu.Item>\r\n            </Menu.SubMenu>\r\n        </Menu>\r\n    );\r\n\r\n    const drawerHandler = () => {\r\n        setDrawerIsOpen((prevState) => {\r\n          console.log(\"Drawer \" + (!prevState ? 'Open':'Closed'));\r\n    \r\n          return !prevState\r\n        });\r\n        // setDrawerIsOpen(true);\r\n      };\r\n    \r\n      const handleDrawerOk = () => {\r\n        setSelectedFilter((previousState) => !previousState)\r\n        setDrawerIsOpen(false);\r\n      };\r\n    \r\n      const onDrawerClose = () => {\r\n        console.log(\"Closed\")\r\n        setDrawerIsOpen(false);\r\n      };\r\n    \r\n      const handleDrawerReset = () => {\r\n        setSelectedFilter((previousState) => !previousState)\r\n        setSelectedStaffFilter(false)\r\n        setSelectedTaskTypeFilter(false)\r\n    \r\n        setDrawerIsOpen(false);\r\n      };\r\n\r\n      const getAllStaff = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-users\",\r\n            // data: values,\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n        }).then(function (response) {\r\n            console.log(response.data);\r\n            if (response.data.success) {\r\n                setAllStaff(response.data.data);\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n        });\r\n      };\r\n\r\n\r\n    // useEffect(() => {\r\n    //     handleJobsiteChangeDataPagination(JobSiteID)\r\n    // }, [page])\r\n    // useEffect(() => {\r\n    //     handleJobsiteChangeDataPagination(JobSiteID, 1)\r\n    // }, [searchText])\r\n    // useEffect(() => {\r\n    //     handleJobsiteChangeDataPagination(JobSiteID)\r\n    // }, [current])\r\n\r\n    useEffect(() => {\r\n        getContract();\r\n        getAllStaff();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getContract();\r\n    }, [searchText])\r\n    \r\n    useEffect(() => {\r\n        getContract();\r\n    }, [selectedFilter])\r\n\r\n    return (\r\n        <>\r\n            <div className='d-flex justify-content-between'>\r\n                <PageHeading\r\n                    title=\"Tasks List\" />\r\n                <div className=\"d-flex justify-content-between mb-3\">\r\n                    <div className=\" d-flex align-items-center justify-content-between\">\r\n                        <SearchBox setSearchText={setSearchText} />\r\n\r\n                        <Button className=\"d-flex align-items-center ml-2\" onClick={drawerHandler}>\r\n                            <Icon className=\"mr-2\" component={FilterIcon} />\r\n                            Filters\r\n                        </Button>\r\n\r\n                        <CSVLink data={allContractsData}\r\n                            headers={headers}\r\n                            filename={\"All-Quotations.csv\"}\r\n                        >\r\n                            <Button className=\"d-flex align-items-center ml-2\" >\r\n                                <img className=\"mr-2\" src={exportIcon} alt=\"exportIcon\"></img>Export\r\n                            </Button>\r\n                        </CSVLink>\r\n\r\n                        <Link to={`/app/task-management/add-task/${contractData.tc_customer_id}/${contractData.tc_customer_job_site_id}/${contractData.id}`}>\r\n                            <Button\r\n                                className=\"d-flex align-items-center ml-2\"\r\n                                type=\"primary\"\r\n                            // size=\"large\"\r\n                            >\r\n                                <img className=\"mr-2\" src={plusIcon} alt=\"plusIcon\"></img>\r\n                                Add New Tasks\r\n                            </Button>\r\n                        </Link>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Card>\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    gap: \"10px\"\r\n                }}>\r\n                    <div style={{\r\n                        width: \"50px\", height: \"50px\", borderRadius: \"100%\",\r\n                    }}>\r\n                        <img src={contractData.customer_image} style={{\r\n                            borderRadius: \"100%\",\r\n                            height: \"100%\",\r\n                            width: \"100%\",\r\n                            objectFit: \"cover\"\r\n                        }} />\r\n                    </div>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        gap: \"10px\",\r\n                        flexDirection: \"column\"\r\n                    }}>\r\n                        <div>\r\n                            <div style={{\r\n                                color: \"#5772FF\",\r\n                                fontSize: \"14px\"\r\n                            }}>{\r\n                                    contractData.customer_name\r\n                                } \r\n                                {contractData.status && \r\n                                (contractData.status.toUpperCase()==='ACTIVE' ? \r\n                                    <span className='ml-2' style={{color: \"#00AB6F\", backgroundColor: \"#EDFFF9\", padding: '4px 8px', borderRadius:'6px', fontWeight:'600', fontSize: '14px'}}>Active</span> :\r\n                                    (contractData.status.toUpperCase()==='EXPIRED' ? <span className='ml-2' style={{color: '#F53434', backgroundColor: '#FFF2F2', padding: '4px 8px', borderRadius:'6px', fontWeight:'600', fontSize: '14px'}}>{contractData.status}</span> : \r\n                                    <span className='ml-2' style={{color: '#F53434', backgroundColor: '#FFF2F2', padding: '4px 8px', borderRadius:'6px', fontWeight:'600', fontSize: '14px'}}>{'Inactive'}</span> )\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div ><span style={{\r\n                                fontWeight: \"bold\"\r\n                            }}>Jobsite:  </span>{\r\n                                    contractData.job_site_name\r\n                                } </div>\r\n                        </div>\r\n                        <div>\r\n                            {contractData.type} | {moment(contractData.created_at).format(\"DD-MM-YYYY\")}\r\n                        </div>\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            gap: \"30px\"\r\n                        }}>\r\n                            <div>Date of Commencement <span style={{\r\n                                fontWeight: \"bold\"\r\n                            }}>{moment(contractData.start_date).format(\"DD-MM-YYYY\")}</span></div>\r\n                            <div>Date of Expire <span style={{\r\n                                fontWeight: \"bold\"\r\n                            }}>\r\n                                {moment(contractData.end_date).format(\"DD-MM-YYYY\")}\r\n                            </span></div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n\r\n\r\n\r\n            <Table\r\n                scroll={{\r\n                    x: 1350,\r\n                }}\r\n                // rowSelection={rowSelection}\r\n                columns={columns}\r\n                dataSource={jobSiteTasksByCustomerIdData}\r\n                onChange={handlechange}\r\n            //   loading={isLoading}\r\n            />\r\n\r\n            <Drawer title=\"Filter\"\r\n                placement=\"right\"\r\n                onClose={onDrawerClose} \r\n                open={drawerIsOpen}\r\n                closable={true}\r\n                // getContainer={false}\r\n                visible={drawerIsOpen}\r\n                footer={[\r\n                    <Button key={'submit'} style={{ color: '#F5F5F5' }} type=\"primary\" className='font-weight-bold mr-2' onClick={handleDrawerOk}>Apply</Button>,\r\n                    <Button key={'cancel'} style={{ color: '#000B23' }} onClick={() => {handleDrawerReset()}} className='font-weight-bold'>Reset</Button>,\r\n            ]}\r\n            >\r\n            <div className=\"mb-2\">\r\n                <h4>Staff Assign</h4>\r\n                <Select\r\n                    showSearch\r\n                    placeholder=\"Jobsite\"\r\n                    value={selectedStaffFilter}\r\n                    onChange={(e) => {setSelectedStaffFilter(e)}}\r\n                    className=\"w-100\"\r\n                >\r\n                    <Select.Option title={'None'} key={'None'} value={null}>{'None'}</Select.Option>\r\n                    {allStaff && allStaff.map((val, id) => (\r\n                        <Select.Option title={val.name} key={id} value={val?.id}>{val.name}</Select.Option>\r\n                    ))}\r\n                </Select>\r\n            </div>\r\n            {/* <div>\r\n                <h4>Task Type</h4>\r\n                <Select\r\n                    showSearch\r\n                    placeholder=\"Task Type\"\r\n                    value={selectedTaskTypeFilter}\r\n                    onChange={(e) => {setSelectedTaskTypeFilter(e)}}\r\n                    className=\"w-100\"\r\n                >\r\n                    <Select.Option title={'None'} key={'None'} value={null}>{'None'}</Select.Option>\r\n                    <Select.Option title={'One Time'} key={'One Time'} value={'One Time'}>{'One Time'}</Select.Option>\r\n                    <Select.Option title={'Recurring'} key={'Recurring'} value={'Recurring'}>{'Recurring'}</Select.Option>\r\n                </Select>\r\n            </div> */}\r\n            </Drawer>\r\n            <Modal centered visible={showDeletedSuccess} footer={[null]} onCancel={() => { setShowDeletedSuccess(false) }}>\r\n                <SuccessSubmit icon={Successfully} title=\"Job site task deleted successfully!\" desc='deleted successfully' />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default JobSiteTasks","import PageHeading from 'components/shared-components/PageHeading/PageHeading'\r\nimport React, { useEffect } from 'react'\r\nimport TaskManagement from \"assets/svg/TaskManagement.svg\";\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { Avatar, Card, Col, message, Form, Input, Modal, Row, Select, Button, DatePicker, Radio, Switch, Table, Typography, Tag } from 'antd';\r\nimport SuccessSubmit from 'views/app-views/UserManagement/AddNewStaffV2/AsiignShift/SuccessSubmit';\r\nimport { Successfully } from 'configs/svgIcons';\r\nimport { useState } from 'react';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport Dragger from 'antd/lib/upload/Dragger';\r\nimport Icon from \"@ant-design/icons\";\r\nimport { AddUserIcon } from 'assets/svg/icon';\r\nimport { DeleteIconRed } from 'assets/svg/ActionsSvg';\r\nimport './index.css'\r\nimport axios from 'axios';\r\nimport * as moment from 'moment';\r\nimport { useHistory } from 'react-router-dom';\r\n// import { differenceInCalendarDays, differenceInCalendarYears } from 'date-fns'\r\n// import SizeContext from 'antd/es/config-provider/SizeContext';\r\nconst {Title} = Typography;\r\n\r\nconst getBase64 = (file) =>\r\n    new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n\r\nfunction AddNewTasks() {\r\n\r\n    const param = useParams()\r\n    const location = useLocation()\r\n    const [form] = Form.useForm();\r\n    const [edit, setEdit] = useState(false)\r\n    const [contractData, setContractData] = useState([])\r\n    const [showDeletedSuccess, setShowDeletedSuccess] = useState(false);\r\n    const [taskCategoriesData, setTaskCategoriesData] = useState([])\r\n    // const [addNewTaskData, setaddNewTaskData] = useState({\r\n    //     task_recurrence: 'DAILY',\r\n    //     recur_forever: false,\r\n    //     skip_weekends: false,\r\n    // })\r\n    const [recur_forever, setRecurForever] = useState(false)\r\n    const [skip_weekends, setSkipWeekends] = useState(false)\r\n    const [customerDetails, setCustomerDetails] = useState({});\r\n    const tok = localStorage.getItem('token')\r\n\r\n    function disabledDate(current) {\r\n        let customDate = moment().format(\"YYYY-MM-DD\");\r\n        return current && current < moment(customDate, \"YYYY-MM-DD\");\r\n        //    return differenceInCalendarDays(current, new Date())\r\n    }\r\n\r\n    const [successMsg, setsuccessMsg] = useState({})\r\n\r\n    const [FileList, setFileList] = useState([])\r\n    const [imagesList, setImagesList] = useState([])\r\n    const [documentUrl, setDocumentUrl] = useState('')\r\n    const history = useHistory()\r\n    const [previewOpen, setPreviewOpen] = useState(false);\r\n    const [previewImage, setPreviewImage] = useState(\"\");\r\n    const [previewTitle, setPreviewTitle] = useState(\"\");\r\n\r\n    const handleCancel = () => setPreviewOpen(false);\r\n\r\n    const handlePreview = async (file) => {\r\n        console.log(file)\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj);\r\n        }\r\n        setPreviewImage(file.url || file.preview);\r\n        // console.log(file.url || file.preview)\r\n        setPreviewOpen(true);\r\n        setPreviewTitle(\r\n            file.name || file.url.substring(file.url.lastIndexOf(\"/\") + 1)\r\n        );\r\n    };\r\n\r\n    const handleUploadChange = ({ fileList: newFileList }) => {\r\n        setFileList(newFileList)\r\n        console.log(FileList)\r\n        // const formData = new FormData();\r\n        // formData.append(\"file\", newFileList[0].originFileObj)\r\n        // axios({\r\n        //     method: 'post',\r\n        //     url: \"/api/tc/upload-document\",\r\n        //     data: formData,\r\n        //     headers: {\r\n        //         'content-type': `multipart/form-data`,\r\n        //         Authorization: `Bearer ${tok}`\r\n        //     },\r\n        // }).then(function (response) {\r\n        //     console.log(response);\r\n        //     if (response.data.success) {\r\n        //         setDocumentUrl(response.data.url)\r\n        //     }\r\n        // }).catch(function (error) {\r\n        //     console.log(error);\r\n        // });\r\n    };\r\n\r\n    const uploadImage = async () => {\r\n        let imagesUrl = [];\r\n\r\n        for (let i = 0; i < FileList.length; i++) {\r\n            const formData = new FormData();\r\n            if (FileList[i].url) {\r\n                imagesUrl.push({ url: FileList[i].url })\r\n                continue;\r\n            }\r\n            formData.append(\"file\", FileList[i].originFileObj)\r\n            await axios({\r\n                method: 'post',\r\n                url: \"/api/tc/upload-document\",\r\n                data: formData,\r\n                headers: {\r\n                    'content-type': `multipart/form-data`,\r\n                    Authorization: `Bearer ${tok}`\r\n                },\r\n            }).then(function (response) {\r\n                console.log(response);\r\n                if (response.data.success) {\r\n                    console.log(\"response\", response.data.url)\r\n                    imagesUrl.push({ url: response.data.url })\r\n                    // setImagesList([...imagesList, { url: response.data.url }])\r\n                    return true;\r\n                }\r\n                return false\r\n            }).catch(function (error) {\r\n                console.log(error);\r\n                return false\r\n            });\r\n\r\n        }\r\n        return imagesUrl;\r\n    }\r\n\r\n\r\n    const finishHandler = async () => {\r\n        const val = form.getFieldsValue()\r\n        if (checkList.length === 0) {\r\n            message.error('Please add checklist item')\r\n            return\r\n        }\r\n        // console.log(val)\r\n        const imagesdata = await uploadImage()\r\n        let newData;\r\n        newData = { ...val }\r\n\r\n        const UploadData = (images) => {\r\n            // if (location.pathname === `/app/task-management/task/edit/${param.jobSiteName}/${param.customerName}/${param.jobSiteId}/${param.customerId}/${param.taskId}/${param.jobSiteCount}`) {\r\n\r\n            //     createTasks(newData, images, `${axios.defaults.baseURL}/api/tc/update-task`, param.taskId)\r\n            // } else if (location.pathname === `/app/task-management/task/add-new/${param.jobSiteName}/${param.customerName}/${param.jobSiteId}/${param.customerId}/${param.jobSiteCount}`) {\r\n            //     createTasks(newData, images, `${axios.defaults.baseURL}/api/tc/new-task`, false)\r\n            // }\r\n\r\n            if (edit) {\r\n                createTasks(newData, images, `${axios.defaults.baseURL}/api/tc/update-task`, param.taskId)\r\n            }\r\n            else {\r\n                createTasks(newData, images, `${axios.defaults.baseURL}/api/tc/new-task`, false)\r\n            }\r\n\r\n        }\r\n\r\n        UploadData(imagesdata)\r\n\r\n        // createTasks(newData, `${axios.defaults.baseURL}/api/tc/new-task)\r\n        // setShowDeletedSuccess(true)\r\n        // setTimeout(() => {\r\n        //     setShowDeletedSuccess(false)\r\n        //     // history.push('customer-details')\r\n        // }, 3000);\r\n    }\r\n\r\n\r\n    const [selectedItems, setSelectedItems] = useState([]);\r\n    const [selectedTaskCategories, setSelectedTaskCategories] = useState([]);\r\n    const [status, setStatus] = useState('')\r\n\r\n    const checkListData = []\r\n    const [checkList, setCheckList] = useState([])\r\n    const [startDateTime, setStartDateTime] = useState('')\r\n    const [endDateTime, setEndDateTime] = useState('')\r\n\r\n    const [allUsers, setAllUsers] = useState([])\r\n\r\n\r\n    const handleChangeDate1 = (dates, dateString) => {\r\n        console.log(dates)\r\n        console.log(dateString)\r\n        setStartDateTime(dates)\r\n        // setEndDateTime(dateString[1])\r\n    }\r\n    const handleChangeDate2 = (dates, dateString) => {\r\n        console.log(dates)\r\n        console.log(dateString)\r\n        // setStartDateTime(dateString[0])\r\n        setEndDateTime(dates)\r\n    }\r\n\r\n    const handeChecklist = (e) => {\r\n        if (e.target.value === '') {\r\n            message.error('Please enter checklist item')\r\n            return\r\n        }\r\n\r\n        // let inputData = new FormData()\r\n        // console.log('handleEnter')\r\n        setCheckList([...checkList, { text: e.target.value, id: checkList.length + 1 }])\r\n        form.setFieldsValue({ ...form.getFieldsValue(), 'checklistItem': '' })\r\n        // inputData.append('checklistItem','')\r\n        // setCheckListInput('')\r\n    }\r\n\r\n    const handleDeleteCheckList = (id) => {\r\n        const newCheckList = checkList.filter((val) => { return val.id !== id })\r\n        setCheckList(newCheckList)\r\n    }\r\n\r\n    const [endTaskCycleOn, setEndTaskCycleOn] = useState('')\r\n\r\n    const createTasks = (values, images, url, id) => {\r\n\r\n\r\n        // values['task_start_date_time'] = startDateTime\r\n        // values['task_end_date_time'] = endDateTime\r\n        // values['task_status'] = \"PENDING\"\r\n        // values['recur_until'] = `${endTaskCycleOn} 00:00:00`\r\n        // values['images'] = images\r\n        // values['check_list'] = checkList\r\n        // values['tc_customer_id'] = param?.customerId\r\n        // values['tc_contract_id'] = param?.tc_contract_id\r\n        // values['tc_customer_job_site_id'] = param?.jobSiteId\r\n\r\n        values['tc_customer_id'] = param?.customerId\r\n        values['tc_customer_job_site_id'] = param?.jobSiteId\r\n        values['tc_contract_id'] = param?.contractId\r\n        values['name'] = values.task_name\r\n        values['description'] = values.task_description\r\n        values['task_category_id'] = selectedTaskCategories\r\n        values['user_ids'] = selectedItems\r\n        values['task_start_date_time'] = moment(startDateTime).format(\"YYYY-MM-DD HH:mm:ss\")\r\n        values['task_end_date_time'] = moment(endDateTime).format(\"YYYY-MM-DD HH:mm:ss\")\r\n        values['task_recurrence'] = values.task_recurrence\r\n        values['recur_forever'] = recur_forever ? 1 : 0\r\n        values['recur_until'] = `${endTaskCycleOn}`\r\n        values['skip_weekends'] = skip_weekends ? 1 : 0\r\n        values['check_list'] = checkList\r\n        values['images'] = images\r\n        values['task_status'] = status || \"PENDING\"\r\n\r\n\r\n\r\n        if (id) {\r\n            values['id'] = id\r\n        }\r\n        console.log(values)\r\n        console.log(url)\r\n\r\n        axios({\r\n            method: 'post',\r\n            url: url,\r\n            data: values,\r\n            headers: {\r\n                // 'content-type': `multipart/form-data`,\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n        }).then(function (response) {\r\n            console.log(response);\r\n            if (response.data.success) {\r\n                setShowDeletedSuccess(true)\r\n                if (id) {\r\n                    setsuccessMsg({ msg: 'Task Updated Successfully!', desc: \"Task updated.\" })\r\n                } else {\r\n                    setsuccessMsg({ msg: 'Task Added Successfully!', desc: `${response.data.total_tasks} tasks added in job site ${param.jobSiteCount}` })\r\n                }\r\n                setTimeout(() => {\r\n                    setShowDeletedSuccess(false)\r\n                    history.push(`/app/task-management/task/job-sites-tasks/${param?.contractId}`)\r\n                }, 3000);\r\n            }\r\n        }).catch(function (error) {\r\n            // console.log(error);\r\n            message.error(error.response.data.message)\r\n        });\r\n    }\r\n\r\n    const getAllUsers = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-users\",\r\n            // data: values,\r\n            headers: {\r\n                // 'content-type': `multipart/form-data`,\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n        }).then(function (response) {\r\n            console.log(response.data);\r\n            if (response.data.success) {\r\n                setAllUsers(response.data.data)\r\n                if (location.pathname.includes(\"add-task\")) {\r\n\r\n                } else {\r\n                    getSingleTask()\r\n                }\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    const handleResetFields = () => {\r\n        // form.resetFields()\r\n        history.goBack();\r\n    }\r\n\r\n\r\n    const handleEndTaskDate = (date, dateString) => {\r\n        setEndTaskCycleOn(dateString)\r\n    }\r\n\r\n\r\n    const [defaultFileList, setdeFaultFileList] = useState([])\r\n\r\n    const getSingleTask = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task\",\r\n            // data: values,\r\n            headers: {\r\n                // 'content-type': `multipart/form-data`,\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                id: param?.taskId\r\n            }\r\n        }).then(function (response) {\r\n            console.log(response.data);\r\n            if (response.data.success) {\r\n                let data = response.data.data\r\n                form.setFieldsValue({\r\n                    id: data.id,\r\n                    task_name: data.task_name,\r\n                    service_type: data.service_type,\r\n                    task_description: data.task_description,\r\n                    user_ids: data?.users.map((val) => val.id),\r\n                    // checklistItem:data.check_list,\r\n                    timeLine1: moment(`${data.task_start_date_time}`),\r\n                    timeLine2: moment(`${data.task_end_date_time}`),\r\n                    task_recurrence: data.task_recurrence.toUpperCase(),\r\n                    recur_forever: data.recur_forever == 1 ? true : false,\r\n                    skip_weekends: Boolean(data.skip_weekends == 1),\r\n                    endTaskDate: moment(`${data.recur_until}`),\r\n                    uploadImage: data.images,\r\n                    task_category: data.task_category_id\r\n                })\r\n                setSelectedItems(data?.users.map((val) => val.id))\r\n                setStatus(data.task_status)\r\n                setRecurForever(data.recur_forever == 1)\r\n                setSkipWeekends(data.skip_weekends == 1)\r\n                setFileList(data.images)\r\n                // setdeFaultFileList(data.images)\r\n                setStartDateTime(data.task_start_date_time)\r\n                setEndDateTime(data.task_end_date_time)\r\n                setEndTaskCycleOn(data.recur_until.slice(0, 10))\r\n                // console.log(data.images[0].url)\r\n                // setDocumentUrl(data.images[0].url)\r\n                setCheckList(data.check_list)\r\n                setSelectedTaskCategories(data.task_category_id)\r\n                // setaddNewTaskData({\r\n                //     task_recurrence: data.task_recurrence,\r\n                //     recur_forever: data.recur_forever == 1,\r\n                //     skip_weekends: data.skip_weekends == 1,\r\n                // })\r\n\r\n                // console.log(\"recure\", addNewTaskData.recur_forever);\r\n            }\r\n        }).catch(function (error) {\r\n            message.error(error.response.data.message)\r\n        });\r\n    }\r\n\r\n    const getCustomer = (id) => {\r\n        axios\r\n            .post(\r\n                \"/api/tc/get-customer\",\r\n                {\r\n                    id: id,\r\n                },\r\n                {\r\n                    headers: {\r\n                        \"content-type\": \"application/json\",\r\n                        Authorization: `Bearer ${tok}`\r\n                    },\r\n                }\r\n            )\r\n            .then((response) => {\r\n                let res = response.data.data;\r\n                console.log(res)\r\n                setCustomerDetails(res)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    // useEffect(() => {\r\n    // if (location.pathname === `/app/task-management/task/edit/${param.jobSiteName}/${param.customerName}/${param.jobSiteId}/${param.customerId}/${param.taskId}/${param.jobSiteCount}`) {\r\n    //     // console.log(param.jobSiteName)\r\n    //     // console.log(param.customerName)\r\n    //     // console.log(param.jobSiteId)\r\n    //     // console.log(param.customerId)\r\n    //     // console.log(param.taskId)\r\n    //     // console.log(param.jobSiteCount)\r\n\r\n    // }\r\n\r\n    // }, [])\r\n\r\n\r\n    const contractColumn = [\r\n        {\r\n            title: \"Contract ID\",\r\n            dataIndex: \"id\",\r\n        },\r\n        {\r\n            title: \"Customer Name\",\r\n            dataIndex: \"customer_name\",\r\n        },\r\n        {\r\n            title: \"Jobsite\",\r\n            dataIndex: \"job_site_name\",\r\n        },\r\n        {\r\n            title: \"Contract Start Date\",\r\n            dataIndex: \"start_date\",\r\n            render: (text, record) => (\r\n                moment(record.start_date).format(\"DD-MM-YYYY\")\r\n            )\r\n        },\r\n        {\r\n            title: \"Contract End Date\",\r\n            dataIndex: \"expire_on\",\r\n            render: (text, record) => (\r\n                moment(record.end_date).format(\"DD-MM-YYYY\")\r\n            )\r\n        },\r\n        {\r\n            title: \"Status\",\r\n            dataIndex: \"status\",\r\n            render: (_, record) => {\r\n                if (record.status === 'ACTIVE') return <span style={{ color: \"#00AB6F\", backgroundColor: \"#EDFFF9\", padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Active</span>\r\n                else return <span style={{ color: '#F53434', backgroundColor: '#FFF2F2', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Expired</span>\r\n            }\r\n        }\r\n    ]\r\n\r\n    const getContract = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-contract\",\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: { id: param.contractId }\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                setContractData([response.data.data])\r\n                // setTotalJobSite(response.data.data.data)\r\n                // handleJobsiteChangeData(response.data.data.data[0].id)\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n\r\n    const getAllTaskCategories = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task-categories\",\r\n            data: {},\r\n        }).then(function (response) {\r\n            console.log(response.data.data)\r\n            if (response.data.success) {\r\n                let res = response.data.data;\r\n\r\n                let fdata = res.map((elem, ind) => {\r\n                    return {\r\n                        // key: elem.id,\r\n                        id: elem.id,\r\n                        // srNo: ind+1,\r\n                        // category_pic: elem.picture,\r\n                        category_title: elem.title,\r\n                        // created_at: moment(elem.created_at).format(\"DD-MM-YYYY\"),\r\n                        // updated_at: moment(elem.updated_at).format(\"DD-MM-YYYY\"),\r\n                    };\r\n                });\r\n                setTaskCategoriesData(fdata);\r\n                console.log(fdata)\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getContract()\r\n        getAllUsers()\r\n        getAllTaskCategories();\r\n        // getCustomer(param.customerId)\r\n        if (location.pathname.includes(\"add-task\")) {\r\n            setEdit(false)\r\n        } else {\r\n\r\n            setEdit(true)\r\n        }\r\n    }, [])\r\n    return (\r\n        <>\r\n            <div>\r\n                <PageHeading\r\n                    icon={TaskManagement}\r\n                    title=\"Create New Tasks\"\r\n                />\r\n\r\n                <Card>\r\n                    <Table columns={contractColumn} dataSource={contractData} pagination={false} />\r\n                </Card>\r\n\r\n                <Form\r\n                    labelCol={{\r\n                        span: 10,\r\n                    }}\r\n                    form={form}\r\n                    // wrapperCol={{\r\n                    //     span: 17,\r\n                    // }}\r\n                    // initialValues={{ ...addNewTaskData }}\r\n                    // onSubmit={e => e.preventDefault()}\r\n                    layout=\"vertical\"\r\n                    onFinish={finishHandler}\r\n                // onValuesChange={onFormLayoutChange}\r\n\r\n                >\r\n                    <Row gutter={20} >\r\n                        <Col className='mt-3' span={17}>\r\n                            <Card>\r\n                                <p className='font-weight-bold text-size-md mb-4'>Task Details</p>\r\n                                {edit && <Form.Item name='id' label='Task ID'>\r\n                                    <Input defaultValue='1234' disabled />\r\n                                </Form.Item>}\r\n                                <Form.Item rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please enter task name'\r\n                                    },\r\n                                ]} name='task_name' label='Task Name'>\r\n                                    <Input />\r\n                                </Form.Item>\r\n\r\n                                {/* <Form.Item rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please enter service type'\r\n                                    },\r\n                                ]} name='service_type' label='Services'>\r\n                                    <Select>\r\n                                        <Select.Option value='Mopping'>Mopping</Select.Option>\r\n                                        <Select.Option value='Carpet Cleaning'>Carpet Cleaning</Select.Option>\r\n                                        <Select.Option value='Moving'>Moving</Select.Option>\r\n                                        <Select.Option value='Toilet Descaling'>Toilet Descaling</Select.Option>\r\n                                        <Select.Option value='Wipe staircase railing'>Wipe staircase railing</Select.Option>\r\n                                        <Select.Option value='High Dusting'>High Dusting</Select.Option>\r\n                                        <Select.Option value='Flooring & Carpentering'>Flooring & Carpentering</Select.Option>\r\n                                        <Select.Option value='Pest Control'>Pest Control</Select.Option>\r\n                                        <Select.Option value='Aircon Servicing'>Aircon Servicing</Select.Option>\r\n                                        <Select.Option value='Painting'>Painting</Select.Option>\r\n                                        <Select.Option value='Printing services'>Printing services</Select.Option>\r\n                                        <Select.Option value='Food catering'>Food catering</Select.Option>\r\n                                        <Select.Option value='Renovation'>Renovation</Select.Option>\r\n                                        <Select.Option value='Office & Pantry Supplies'>Office & Pantry Supplies</Select.Option>\r\n                                        <Select.Option value='Kitchen Supplies'>Kitchen Supplies</Select.Option>\r\n                                        <Select.Option value='Surveillance Systems'>Surveillance Systems</Select.Option>\r\n                                        <Select.Option value='Interior Design'>Interior Design</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item> */}\r\n\r\n                                <Form.Item rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please enter task description'\r\n\r\n                                    },\r\n                                ]} name='task_description' label='Task Description'>\r\n                                    <Input.TextArea rows={6} />\r\n                                </Form.Item>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col className='mt-3 d-flex flex-column ' span={7}>\r\n\r\n                            {/* <Row className=''>\r\n                                <Card className='w-100'>\r\n                                    <p className='font-weight-bold text-size-md mb-4'>Images</p>\r\n                                        <Dragger\r\n                                            beforeUpload={() => {\r\n                                                return false;\r\n                                            }}\r\n                                            listType=\"picture-card\"\r\n                                            defaultFileList={defaultFileList}\r\n                                            style={{ minHeight: '40px', minWidth: '40px', maxHeight: \"150px\", marginBottom: '10px' }}\r\n                                            maxCount={4}\r\n                                            onPreview={handlePreview}\r\n                                            onChange={handleUploadChange}\r\n                                            fileList={FileList}\r\n                                            className='dragUpload' >\r\n                                            <p className=\"ant-upload-drag-icon\">\r\n                                                <InboxOutlined />\r\n                                            </p>\r\n                                            <p className=\"font-weight-bold text-size-md\">Drag & drop files here or <span className='text-danger'>Choose Files</span></p>\r\n\r\n                                        </Dragger>\r\n                                        <Modal\r\n                                            visible={previewOpen}\r\n                                            title={previewTitle}\r\n                                            footer={null}\r\n                                            onCancel={handleCancel}\r\n\r\n                                        >\r\n                                            <img\r\n                                                className=\"myimg\"\r\n                                                alt=\"example\"\r\n                                                style={{\r\n                                                    width: \"100%\",\r\n                                                }}\r\n                                                src={previewImage}\r\n                                            />\r\n                                        </Modal>\r\n                                </Card>\r\n                            </Row> */}\r\n\r\n                            <Row style={{ flex: \"1\" }} className='' >\r\n                                <Card className=' w-100' >\r\n                                    <p className='font-weight-bold text-size-md mb-4'>Task Category</p>\r\n                                    <Form.Item rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Plese select Task Category',\r\n                                        },\r\n                                    ]} className='font-weight-bold text-size-md mb-4' name='task_category'>\r\n                                        <Select\r\n                                            showSearch\r\n                                            mode='single'\r\n                                            placeholder=\"Task Category\"\r\n                                            optionFilterProp=\"children\"\r\n                                            // filterOption={(input, option) => (option?.title ?? '').toString().toLowerCase()?.includes(input?.toLowerCase())}\r\n                                            // filterSort={(optionA, optionB) =>\r\n                                            //     (optionA?.label ?? '').toString().toLowerCase().localeCompare((optionB?.label ?? '').toString().toLowerCase())\r\n                                            // }\r\n                                            value={selectedTaskCategories}\r\n                                            onChange={setSelectedTaskCategories}\r\n                                        >\r\n                                            {taskCategoriesData.map((val, id) => (\r\n                                                <Select.Option value={val?.id}>{val.category_title}</Select.Option>\r\n                                            ))}\r\n                                            {/* <Select.Option value={0}>Select</Select.Option> */}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Card>\r\n                            </Row>\r\n\r\n                            <Row style={{ flex: \"1\" }} className='' >\r\n                                <Card className=' w-100' >\r\n                                    <p className='font-weight-bold text-size-md mb-4'>Assign Staff</p>\r\n                                    <Form.Item rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Plese assign task',\r\n                                        },\r\n                                    ]} className='font-weight-bold text-size-md mb-4' name='user_ids'>\r\n                                        <Select\r\n                                            // suffixIcon={<AddUserIcon/>}\r\n                                            showSearch\r\n                                            // style={{\r\n                                            //     width: 200,\r\n                                            // }}\r\n                                            mode='multiple'\r\n                                            placeholder=\"Assign Task to\"\r\n                                            optionFilterProp=\"children\"\r\n                                            filterOption={(input, option) => (option?.title ?? '').toString().toLowerCase()?.includes(input?.toLowerCase())}\r\n                                            filterSort={(optionA, optionB) =>\r\n                                                (optionA?.label ?? '').toString().toLowerCase().localeCompare((optionB?.label ?? '').toString().toLowerCase())\r\n                                            }\r\n                                            value={selectedItems}\r\n                                            onChange={setSelectedItems}\r\n                                        >\r\n                                            {allUsers.map((val, id) => (\r\n                                                <Select.Option title={val.name} key={id} value={val?.id}>{val.name}</Select.Option>\r\n                                            ))}\r\n                                            {/* <Select.Option value={1}>John Smith</Select.Option>\r\n                                            <Select.Option value={2}>Jane Cooper</Select.Option> */}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Card>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={20}>\r\n                        <Col span={17}>\r\n                            <Card className='pr-5 pb-3'>\r\n                                <p className='font-weight-bold text-size-md mb-4'>Check List</p>\r\n                                {checkList.map((val, idx) => (\r\n                                    <div key={idx} className='d-flex justify-content-between'>\r\n                                        <p className='font-weight-normal'>{val.text}</p>\r\n                                        <Icon onClick={() => { handleDeleteCheckList(val.id) }} component={DeleteIconRed} />\r\n                                    </div>\r\n                                ))}\r\n                                <Form.Item name='checklistItem'>\r\n                                    <Input onPressEnter={(e) => handeChecklist(e)} placeholder='Type here' />\r\n                                    {/* <Button onClick={handeChecklist} type='primary'>Add</Button> */}\r\n                                </Form.Item>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col span={7}>\r\n                            <Card>\r\n                                <p className='font-weight-bold text-size-md mb-4'>Task Timeline</p>\r\n                                <Form.Item rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please select time duration',\r\n                                    },\r\n                                ]} name='timeLine1' >\r\n                                    {/* <DatePicker.RangePicker onChange={handleChangeDate} showTime={{ format: 'HH:mm:ss', }} format=\"YYYY-MM-DD HH:mm:ss\" /> */}\r\n                                    <DatePicker placeholder='select start date and time' onChange={handleChangeDate1} showTime={{ format: 'HH:mm A', }} format=\"YYYY-MM-DD HH:mm A\" disabledDate={disabledDate} />\r\n                                </Form.Item>\r\n                                <Form.Item rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please select time duration',\r\n                                    },\r\n                                ]} name='timeLine2'  >\r\n                                    {/* <DatePicker.RangePicker onChange={handleChangeDate} showTime={{ format: 'HH:mm:ss', }} format=\"YYYY-MM-DD HH:mm:ss\" /> */}\r\n                                    <DatePicker placeholder='select end date and time' onChange={handleChangeDate2} showTime={{ format: 'HH:mm A', }} format=\"YYYY-MM-DD HH:mm A\" disabledDate={disabledDate} />\r\n                                </Form.Item>\r\n                                <Form.Item rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please select task recurrence',\r\n                                    },\r\n                                ]} name=\"task_recurrence\">\r\n                                    <Radio.Group defaultValue=\"DAILY\" size=\"small\"\r\n                                        style={{\r\n                                            marginTop: 16,\r\n                                            gap: '10px',\r\n                                            display: 'flex',\r\n                                            flexWrap: 'wrap'\r\n                                        }}\r\n                                        buttonStyle='solid'\r\n                                    >\r\n                                        <Radio.Button className='taskTimeLineRadioTabs' defaultChecked value=\"DAILY\">Daily</Radio.Button>\r\n                                        <Radio.Button className='taskTimeLineRadioTabs' value=\"WEEKLY\">Weekly</Radio.Button>\r\n                                        <Radio.Button className='taskTimeLineRadioTabs' value=\"MONTHLY\">Monthly</Radio.Button>\r\n                                        <Radio.Button className='taskTimeLineRadioTabs' value=\"YEARLY\">Yearly</Radio.Button>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    className='recur_forever d-flex flex-row'\r\n                                    // label='Recur Forever'\r\n                                    // name='recur_forever'\r\n                                    rules={[{ required: false, message: 'Missing area' }]}\r\n                                >   \r\n                                    <div className='w-75 d-flex justify-content-between'>\r\n                                        <h5 className='mr-5'>Recur Forever</h5>\r\n                                        <Switch checked={recur_forever} onChange={(e) => {\r\n                                            setRecurForever(e)\r\n                                        }} />\r\n                                    </div>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    className='skip_weekends d-flex flex-row'\r\n                                    // label='Skip Weekends'\r\n                                    // name='skip_weekends'\r\n                                    rules={[{ required: false, message: 'Missing area' }]}\r\n                                >\r\n                                    <div className='w-75 d-flex justify-content-between'>\r\n                                        <h5 className='mr-5'>Skip Weekends</h5>\r\n                                        <Switch checked={skip_weekends} onChange={(e) => {\r\n                                            setSkipWeekends(e)\r\n                                        }} />\r\n                                    </div>\r\n                                </Form.Item>\r\n                                {/* <div className='d-flex flex-row'>\r\n                                    <span style={{fontSize: '14px'}}>Repeat </span>\r\n                                    <Form.Item rules={[\r\n                                        {\r\n                                            required: false,\r\n\r\n                                        },\r\n                                    ]} label='Repeat' name='repeats'>\r\n                                        <Select style={{width: '100px', marginRight: '10px'}}>\r\n                                            <Select.Option value='repeat'>Repeat</Select.Option>\r\n                                            <Select.Option value='do_not_repeat'>No Repeat</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item rules={[\r\n                                        {\r\n                                            required: false,\r\n\r\n                                        },\r\n                                    ]} label='Repeat By' name='repeat_by'>\r\n                                        <Input suffix=\"Times\" />\r\n                                    </Form.Item>\r\n                                </div> */}\r\n                                <Form.Item rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Plese Select end task cycle date'\r\n                                    },\r\n                                ]} label='End task cycle on' name='endTaskDate'>\r\n                                    <DatePicker onChange={handleEndTaskDate} format='YYYY-MM-DD' />\r\n                                </Form.Item>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    <Form.Item rules={[\r\n                        {\r\n                            required: true,\r\n                        },\r\n                    ]} className={`d-flex align-items-end justify-content-end Button`}>\r\n                        <Button onClick={handleResetFields}>Cancel</Button>\r\n                        <Button className='ml-3' htmlType='submit' type=\"primary\">Save</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <Modal centered visible={showDeletedSuccess} footer={[null]} onCancel={() => { setShowDeletedSuccess(false) }}>\r\n                    <SuccessSubmit icon={Successfully} title={successMsg.msg} desc={successMsg.desc} />\r\n                </Modal>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddNewTasks","import React from 'react'\r\nimport avatar from \"assets/Avatar2.png\";\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Icon from \"@ant-design/icons\";\r\nimport { PageIcon } from 'assets/svg/ActionsSvg';\r\nimport { Avatar, Space, Table } from 'antd';\r\nimport axios from 'axios';\r\nimport { useEffect } from 'react';\r\nimport moment from 'moment';\r\n\r\n\r\nlet data = [\r\n    {\r\n        key: 1,\r\n        id: '2311',\r\n        submittedBy: { img: avatar, name: \"John Smith\" },\r\n        submittedOn: '4 jan 2023',\r\n        remarks: 'Loreum ispum is dummy text.Loreum ispum is dummy text.Loreum ispum is dummy text.',\r\n        status: 'Blocker',\r\n    }\r\n]\r\n\r\nfor (let i = 2; i < 9; i++) {\r\n    data.push({\r\n        key: i,\r\n        id: '231' + i,\r\n        submittedBy: { img: avatar, name: \"Wade Warren\" },\r\n        submittedOn: '4 jan 2023',\r\n        remarks: 'Loreum ispum is dummy text.Loreum ispum is dummy text.Loreum ispum is dummy text.',\r\n        status: 'Completed',\r\n    })\r\n}\r\n\r\n\r\nfunction JobCompletionReportTable({taskId,searchText}) {\r\n\r\n    // console.log(taskId)\r\n    const [jobCompletionData, setjobCompletionData] = useState([])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'ID',\r\n            dataIndex: 'id',\r\n            filteredValue: [searchText],\r\n            onFilter: (value, record) => {\r\n                return String(record.id)\r\n                .toLowerCase()\r\n                .includes(value.toLowerCase()) ||\r\n                String(record.submittedBy)\r\n                .toLowerCase()\r\n                .includes(value.toLowerCase()) ||\r\n                String(record.submittedOn)\r\n                .toLowerCase()\r\n                .includes(value.toLowerCase()) ||\r\n                String(record.report)\r\n                .toLowerCase()\r\n                .includes(value.toLowerCase()) ||\r\n                String(record.status)\r\n                .toLowerCase()\r\n                .includes(value.toLowerCase())\r\n            },\r\n        },\r\n        {\r\n            title: 'Submitted By',\r\n            width : 180,\r\n            render: (item) => {\r\n                return (\r\n                    <div className='d-flex align-items-center'>\r\n                        <Avatar src={item.submitted_by_image} />\r\n                        <p className='m-0 p-0 ml-3 '>{item?.submitted_by_name}</p>\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            title: 'Submitted On',\r\n            width : 140,\r\n            render: (item) => {\r\n                return (\r\n                    <div className='d-flex align-items-center'>\r\n                        {moment(new Date(item?.updated_at)).format('dddd, DD MMM YYYY')}\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            title: 'Remarks',\r\n            dataIndex: 'report'\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            render: (_, record) => {\r\n                return <Link to={`/app/task-management/task/task-completion-report/${record.id}`}><Icon component={PageIcon} /> </Link>\r\n            }\r\n        },\r\n    ]\r\n\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n\r\n    const selectChangeHandler = (newSelectedRowKeys) => {\r\n        console.log(\"selectedRowKeys changed: \", newSelectedRowKeys);\r\n        setSelectedRowKeys(newSelectedRowKeys);\r\n    };\r\n\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: selectChangeHandler,\r\n    };\r\n\r\n\r\n    const tok = localStorage.getItem('token') \r\n\r\n\r\n    const getReports = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task-reports\",\r\n            headers: {\r\n                // 'content-type': `multipart/form-data`,\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                task_id:taskId,\r\n                statuses:[\"COMPLETED\"]\r\n            },\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                setjobCompletionData(response.data.data.data)\r\n            }\r\n        })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getReports()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <Table\r\n            // scroll={{\r\n            //     x: 1000,\r\n            // }}\r\n            rowSelection={rowSelection}\r\n            columns={columns}\r\n            dataSource={jobCompletionData}\r\n        //   loading={isLoading}\r\n        />\r\n    )\r\n}\r\n\r\nexport default JobCompletionReportTable","import PageHeading from 'components/shared-components/PageHeading/PageHeading'\r\nimport React, { useEffect, useState } from 'react'\r\nimport TaskManagement from \"assets/svg/TaskManagement.svg\";\r\nimport { Avatar, Button } from 'antd';\r\nimport SearchBox from 'components/shared-components/SearchBox';\r\nimport Filter from 'views/app-views/UserManagement/UserList/Filter';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport filterIcon from \"assets/svg/filterIcon.svg\";\r\nimport exportIcon from \"assets/svg/exportIcon.svg\";\r\nimport JobCompletionReportTable from './JobCompletionReportTable';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction TaskCompletionReport() {\r\n\r\n\r\n    const param = useParams()\r\n    const history = useHistory()\r\n    const tok = localStorage.getItem('token') \r\n    const [searchText, setSearchText] = useState('')\r\n    const [taskData, setTaskData] = useState([])\r\n\r\n    const getTask = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task\",\r\n            headers: {\r\n                // 'content-type': `multipart/form-data`,\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                id: param.id\r\n            },\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                setTaskData(response.data.data)\r\n            }\r\n        })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTask()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PageHeading\r\n                icon={TaskManagement}\r\n                title=\"Task Management / Job Sites Tasks / Job Completion Reports \"\r\n            />\r\n            <div className='d-flex justify-content-between'>\r\n                <div>\r\n                    <p className='font-weight-bolder text-size-md text-primary'>Tasks</p>\r\n                    <p className='text-size-md'>{taskData?.task_name}</p>\r\n                </div>\r\n                <div>\r\n                    <p className='font-weight-bolder text-size-md text-primary'>Customer</p>\r\n                    <p className='text-size-md'>{taskData?.customer?.name}</p>\r\n                </div>\r\n                <div>\r\n                    <p className='font-weight-bolder text-size-md text-primary'>Job Site</p>\r\n                    <p className='text-size-md'>{`${taskData?.job_site?.street_number !==null ? taskData?.job_site?.street_number:''} ${taskData?.job_site?.block_number!==null ? taskData?.job_site?.block_number:''} ${taskData?.job_site?.postal_code!==null ? taskData?.job_site?.postal_code:''} ${taskData?.job_site?.country!==null ? taskData?.job_site?.country:''}`}</p>\r\n                </div>\r\n                <div>\r\n                    <p className='font-weight-bolder text-size-md text-primary'>Task Type</p>\r\n                    <p className='text-size-md'>{`Recurring ${taskData?.task_recurrence}-Repeat`}</p>\r\n                </div>\r\n                <div>\r\n                    <p className='font-weight-bolder text-size-md text-primary'>Staff Assigned</p>\r\n                    <Avatar.Group\r\n                        maxCount={2}\r\n                        maxPopoverTrigger=\"click\"\r\n                        size=\"small\"\r\n                        maxStyle={{\r\n                            color: '#f56a00',\r\n                            backgroundColor: '#fde3cf',\r\n                            cursor: 'pointer',\r\n                        }}\r\n                    >\r\n                        {taskData?.users?.map((val,idx)=>(\r\n                            <Avatar size='small' src={val?.profile_pic} />\r\n                        ))}\r\n                    </Avatar.Group>\r\n                </div>\r\n            </div>\r\n            <div className=\"d-flex justify-content-between mt-3 mb-3\">\r\n                <div className=\" d-flex align-items-center justify-content-between\">\r\n                    <SearchBox setSearchText={setSearchText} />\r\n                    {/* <Filter>\r\n                        <Button className=\"d-flex align-items-center ml-2\">\r\n                            <img className=\"mr-2\" src={filterIcon} alt=\"filterIcon\"></img>\r\n                            Filters\r\n                        </Button>\r\n                    </Filter> */}\r\n\r\n                    <Button className=\"d-flex align-items-center ml-2\" >\r\n                        <img className=\"mr-2\" src={exportIcon} alt=\"exportIcon\"></img>Export\r\n                    </Button>\r\n                </div>\r\n                <div>\r\n                    \r\n                        <Button onClick={history.goBack}\r\n                            className=\"d-flex align-items-center\"\r\n                            size=\"middle\"\r\n                        >\r\n                            Back\r\n                        </Button>\r\n                    \r\n                </div>\r\n            </div>\r\n            <div>\r\n                <JobCompletionReportTable searchText={searchText} taskId = {param.id} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskCompletionReport","import React from 'react'\r\nimport TaskManagement from \"assets/svg/TaskManagement.svg\";\r\nimport PageHeading from 'components/shared-components/PageHeading/PageHeading';\r\nimport { Button, Card, DatePicker, Form, Input } from 'antd';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Icon from '@ant-design/icons'\r\nimport { PageIcon } from 'assets/svg/ActionsSvg';\r\nimport { RightIcon } from 'assets/svg/icon';\r\nimport { PdfIcon } from 'views/app-views/ItemsAndServices/svgIcons';\r\nimport Image1 from 'assets/image1.png'\r\nimport Image2 from 'assets/img2.png'\r\nimport Image3 from 'assets/image3.png'\r\nimport Image4 from 'assets/img4.png'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\nfunction TaskCompletionReportInDetail() {\r\n\r\n    const param = useParams()\r\n    const tok = localStorage.getItem('token') \r\n    const history = useHistory()\r\n    const [taskReport, setTaskReport] = useState({})\r\n    const [taskData, setTaskData] = useState([])\r\n    const [downloadingReport, setDownloadingReport] = useState(false)\r\n    const [form] = Form.useForm()\r\n\r\n    const getTask = (id) => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task\",\r\n            headers: {\r\n                // 'content-type': `multipart/form-data`,\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                id: id\r\n            },\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                setTaskData(response.data.data)\r\n            }\r\n        })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const getReport = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task-report\",\r\n            headers: {\r\n                // 'content-type': `multipart/form-data`,\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                id:param.id\r\n            },\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                setTaskReport(response.data.data)\r\n                getTask(response.data.data?.tc_job_site_task_id)\r\n                // form.setFieldsValue({\r\n                //     dateOfCompletion: response.data.data?.updated_at\r\n                // })\r\n                console.log(moment(taskReport?.updated_at).format('DD-MM-YYYY'))\r\n            }\r\n        })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const downloadReport = () => {\r\n    \r\n    let domain = '';\r\n    if(window.location.hostname.includes(\"local\")) {\r\n      domain = `${axios.defaults.baseURL}`\r\n    } else {\r\n      domain = window.location.protocol + \"//\" + window.location.hostname;\r\n    }\r\n\r\n    setDownloadingReport(true)\r\n    \r\n    let dataDownload = {\r\n      \"url\": domain + \"/task-completion-report-print/\" + param.id,\r\n      \"no-download\": true,\r\n      \"folder_name\": 'task-reports',\r\n    }\r\n    axios({\r\n        method: 'post',\r\n        url: \"/api/tc/download-task-report\",\r\n        headers: {\r\n            Authorization: `Bearer ${tok}`\r\n        },\r\n        data: dataDownload,\r\n    }).then((response) => {\r\n        console.log(response.data)\r\n        setDownloadingReport(false)\r\n        if (response.data.success) {\r\n            window.open(response.data.url, '_blank');\r\n        }\r\n    }).catch((err) => {\r\n        console.log(err)\r\n        setDownloadingReport(false)\r\n    })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getReport()\r\n    }, [])\r\n\r\n    console.log(taskReport?.before_images)\r\n\r\n    return (\r\n        <div>\r\n            <PageHeading\r\n                icon={TaskManagement}\r\n                title=\"Task Management / Job Sites Tasks / Job Completion Reports \"\r\n            />\r\n            <div className='d-flex justify-content-between'>\r\n                <div>\r\n                    <p className='font-weight-bolder font-size-md' ><Icon component={PageIcon} />  Task Completion Report</p>\r\n                </div>\r\n                <Form style={{ gap: '10px' }} className='d-flex' form={form}>\r\n                    <Form.Item>\r\n                        <Link>\r\n                            <Button onClick={history.goBack} className='px-5' size='middle'>Back</Button>\r\n                        </Link>\r\n                    </Form.Item>\r\n                    <Form.Item >\r\n                        <DatePicker format=\"dddd, DD MMM YYYY\" \r\n                        value={moment(taskReport?.updated_at)} \r\n                        inputReadOnly\r\n                        allowClear={false}/>\r\n                        {/* {taskData.updated_at && <p className='py-2'>Date: {new Date(taskData?.updated_at).toLocaleDateString('en-GB')}</p>} */}\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n            <Card>\r\n                <div className='mb-4'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Report ID</p>\r\n                    <p className='font-weight-normal'>{taskReport?.id}</p>\r\n                </div>\r\n                <div className='mb-4'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Task ID</p>\r\n                    <p className='font-weight-normal'>{taskReport?.tc_job_site_task_id}</p>\r\n                </div>\r\n                <div className='mb-4'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Task Date</p>\r\n                    <p className='font-weight-normal'>{new Date(taskData?.task_start_date_time).toDateString()}</p>\r\n                </div>\r\n                <div className='mb-4'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Services</p>\r\n                    <p className='font-weight-normal'>{taskData?.service_type}</p>\r\n                </div>\r\n                <div className='mb-4'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Task Description</p>\r\n                    <p style={{ maxWidth: '780px' }} className='font-weight-normal'>{taskData?.task_description}</p>\r\n                </div>\r\n                <div className='mb-4'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Check List</p>\r\n                    <div >\r\n                        {taskReport?.check_list?.map((val,idx)=>(\r\n                            <p className='font-weight-normal' ><Icon component={RightIcon} />{val?.text}</p>\r\n                        ))}\r\n                        \r\n                        {/* <p className='font-weight-normal' ><Icon component={RightIcon} /> Lorem ipsum dolor sit amet consectetur.</p>\r\n                        <p className='font-weight-normal' ><Icon component={RightIcon} /> Lorem ipsum dolor sit amet consectetur.</p>\r\n                        <p className='font-weight-normal' ><Icon component={RightIcon} /> Lorem ipsum dolor sit amet consectetur.</p> */}\r\n                    </div>\r\n                </div>\r\n                <div className='mb-5'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Service Before Pictures/Videos</p>\r\n                    <div className='d-flex justify-content-between mt-4 mb-2'>\r\n                        {\r\n                            taskReport?.before_images?.map((val,idx)=>(\r\n                                <img style={{ width: '23%' }} className='' src={val.url} alt=\"\" />\r\n                            ))\r\n                        }\r\n                        {/* <img style={{ width: '23%' }} className='' src={Image1} alt=\"\" />\r\n                        <img style={{ width: '23%' }} className='' src={Image2} alt=\"\" />\r\n                        <img style={{ width: '23%' }} className='' src={Image3} alt=\"\" />\r\n                        <img style={{ width: '23%' }} className='' src={Image4} alt=\"\" /> */}\r\n                    </div>\r\n                </div>\r\n                <div className='mb-5'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Service After Pictures/Videos</p>\r\n                    <div className='d-flex justify-content-between mt-4 mb-2'>\r\n                        {\r\n                            taskReport?.after_images?.map((val, idx) => (\r\n                                <img style={{ width: '23%' }} className='' src={val.url} alt=\"\" />\r\n                            ))\r\n                        }\r\n                        {/* <img style={{ width: '23%' }} className='' src={Image1} alt=\"\" />\r\n                        <img style={{ width: '23%' }} className='' src={Image2} alt=\"\" />\r\n                        <img style={{ width: '23%' }} className='' src={Image3} alt=\"\" />\r\n                        <img style={{ width: '23%' }} className='' src={Image4} alt=\"\" /> */}\r\n                    </div>\r\n                </div>\r\n                <div className='mb-4'>\r\n                    <p className='m-0 p-0 mb-2 font-weight-bold'>Remarks by Staff</p>\r\n                    <p style={{ maxWidth: '780px' }} className='font-weight-normal'>{taskReport?.report}</p>\r\n                </div>\r\n            </Card>\r\n            <div className={`d-flex align-items-end justify-content-end mt-2 Button`}>\r\n                <Button onClick={history.goBack} className='px-5' >Back</Button>\r\n                <Button icon={<PdfIcon />} className='ml-2 text-center d-flex align-items-center' type=\"primary\" htmlType=\"submit\" onClick={downloadReport} loading={downloadingReport}> Download</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskCompletionReportInDetail","import React, { useEffect, useState } from 'react'\r\nimport TaskManagement from \"assets/svg/TaskManagement.svg\";\r\nimport PageHeading from 'components/shared-components/PageHeading/PageHeading';\r\nimport { Avatar, Button, Card, Col, DatePicker, Form, Input, Row } from 'antd';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport Icon from '@ant-design/icons'\r\nimport { PageIcon } from 'assets/svg/ActionsSvg';\r\nimport { RightIcon } from 'assets/svg/icon';\r\nimport { PdfIcon } from 'views/app-views/ItemsAndServices/svgIcons';\r\nimport Image1 from 'assets/image1.png'\r\nimport Image2 from 'assets/img2.png'\r\nimport Image3 from 'assets/image3.png'\r\nimport Image4 from 'assets/img4.png'\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { useLocation } from 'react-router-dom'\r\n\r\n\r\n\r\nfunction JobSiteTaskDetails() {\r\n\r\n    const param = useParams()\r\n    const history = useHistory()\r\n    const tok = localStorage.getItem('token') \r\n\r\n    const [taskData, setTaskData] = useState([])\r\n    const search = useLocation().search;\r\n    const isScheduleView = new URLSearchParams(search).get('isScheduleView');\r\n\r\n    const getTask = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task\",\r\n            // headers: {\r\n            //     Authorization: `Bearer ${tok}`\r\n            // },\r\n            data: {\r\n                id: +param.jobSiteTaskId\r\n            },\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                setTaskData(response.data.data)\r\n            }\r\n        })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTask()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ backgroundColor: '#F5F7FB' }} >\r\n            <div style={{\r\n                backgroundColor: \"#FFFFFF\", margin: \"-25px\",\r\n                background: \"#ffffff\",\r\n                padding: \"25px\",\r\n                paddingBottom: \"0px\",\r\n                marginBottom: \"25px\"\r\n            }}>\r\n                <PageHeading\r\n                    icon={TaskManagement}\r\n                    title=\"Task Management / Job Sites Tasks / Task Details \"\r\n                />\r\n                <div className='d-flex justify-content-between pb-4'>\r\n                    <div>\r\n                        <p className='font-weight-bolder font-size-md' ><Icon component={PageIcon} />  Task Details</p>\r\n                    </div>\r\n                    <div style={{ gap: '10px' }} className='d-flex' >\r\n                        {/* <Link to=> */}\r\n                        <Button onClick={history.goBack} className='px-5' size='middle'>Back</Button>\r\n                        {/* </Link> */}\r\n                        {!isScheduleView && <Link to={`/app/task-management/task/edit/${taskData?.job_site?.name}/${taskData?.customer?.name}/${taskData?.tc_customer_job_site_id}/${taskData?.tc_customer_id}/${taskData?.id}/${param.jobSiteCount}`}>\r\n                            <Button className='px-5' type='primary' size='middle'>Edit</Button>\r\n                        </Link>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{ backgroundColor: '#F5F7FB' }}>\r\n                <Card>\r\n                    <div className='mb-4 d-flex justify-content-between'>\r\n                        <div >\r\n                            <p className='m-0 p-0 mb-2 font-weight-bold'>Task ID</p>\r\n                            <p className='font-weight-normal'>{taskData?.id}</p>\r\n                        </div>\r\n                        <div className='text-right'>\r\n                            {taskData.task_status === 'COMPLETED' && <Button style={{ backgroundColor: '#00AB6F', color: '#FFFFFF' }} className='px-4 mb-2 font-weight-semibold font-size-normal ' size=\"small\" >{taskData?.task_status}</Button>}\r\n                            {taskData.task_status === 'PENDING' && <Button style={{ backgroundColor: '#fca311', color: '#FFFFFF' }} className='px-4 mb-2 font-weight-semibold font-size-normal ' size=\"small\" >{taskData?.task_status}</Button>}\r\n                            {taskData.task_status === 'Blocker' && <Button style={{ backgroundColor: '#F53434', color: '#FFFFFF' }} className='px-4 mb-2 font-weight-semibold font-size-normal ' size=\"small\" >{taskData?.task_status}</Button>}\r\n                            {taskData.task_status === 'COMPLETED' && <p className='font-weight- text-right'>Completion Date: {moment(new Date(taskData?.updated_at)).format('dddd, DD MMM YYYY')}</p>}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Company</p>\r\n                        <p className='font-weight-normal'> <Avatar src={taskData?.customer?.profile_pic} className='mr-2'/> {taskData?.customer?.name} </p>\r\n                    </div>\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Job Site</p>\r\n                        <p className='font-weight-normal'>{taskData?.job_site?.name}</p>\r\n                    </div>\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Task Name</p>\r\n                        <p className='font-weight-normal'>{taskData?.task_name}</p>\r\n                    </div>\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Task Description</p>\r\n                        <p style={{ maxWidth: '780px' }} className='font-weight-normal'>{taskData?.task_description}</p>\r\n                    </div>\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Check List</p>\r\n                        <div >\r\n                            {taskData?.check_list?.map((val, idx) => (\r\n                                <p key={idx} className='font-weight-normal' ><Icon component={RightIcon} /> {val?.text}</p>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className='mb-5'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Images</p>\r\n                        <div className='d-flex justify-content-start mt-4 mb-2'>\r\n                            {taskData?.images?.map((val, idx) => (\r\n                                <img key={idx} style={{ width: '23%' }} className='mr-2' src={val?.url} alt=\"\" />\r\n                            ))}\r\n                            {taskData?.before_images?.map((val, idx) => (\r\n                                <img key={idx} style={{ width:'23%', height: '10%' }} className='mr-2' src={val?.url} alt=\"\" />\r\n                            ))}\r\n                            {taskData?.after_images?.map((val, idx) => (\r\n                                <img key={idx} style={{ width:'23%', height: '10%' }} className='mr-2' src={val?.url} alt=\"\" />\r\n                            ))}\r\n                            {/* <img style={{ width: '23%' }} className='' src={Image1} alt=\"\" />\r\n                            <img style={{ width: '23%' }} className='' src={Image2} alt=\"\" />\r\n                            <img style={{ width: '23%' }} className='' src={Image3} alt=\"\" />\r\n                            <img style={{ width: '23%' }} className='' src={Image4} alt=\"\" /> */}\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n                <Card>\r\n                    <p className='mb-4 font-size-md font-weight-bold'>Task Timeline</p>\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Task Date</p>\r\n                        <p className='font-weight-normal'>{new Date(taskData?.task_end_date_time).toGMTString().slice(0, 17)}</p>\r\n                    </div>\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Time</p>\r\n                        <p className='font-weight-normal'>{moment(taskData?.task_start_date_time, \"HH:mm\").format(\"hh:mm A\")} - {moment(taskData?.task_end_date_time, \"HH:mm\").format(\"hh:mm A\")} </p>\r\n                    </div>\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>Recur</p>\r\n                        <p className='font-weight-normal'>{taskData?.task_recurrence}</p>\r\n                    </div>\r\n                    <div className='mb-4'>\r\n                        <p className='m-0 p-0 mb-2 font-weight-bold'>End Cycle Date</p>\r\n                        <p className='font-weight-normal'>{new Date(taskData?.recur_until).toGMTString().slice(0, 17)}</p>\r\n                    </div>\r\n                </Card>\r\n                <Card>\r\n                    <p className='mb-4 font-size-md font-weight-bold'>Task Assigned To</p>\r\n                    {/* <div className='mb-5'>\r\n                        <p className='font-weight-normal d-flex align-items-center'>\r\n                            <Avatar.Group maxCount={2} maxStyle={{\r\n                                color: '#f56a00',\r\n                                backgroundColor: '#fde3cf',\r\n                            }}>\r\n                                {taskData?.users?.map((val, idx) => (\r\n                                    <Avatar key={idx} src={val?.profile_pic} />\r\n                                ))}\r\n                            </Avatar.Group>\r\n                        </p>\r\n                    </div> */}\r\n                    <div style={{ gap: '15px', display: 'flex', flexDirection: \"column\" }} >\r\n                        {taskData?.users?.map((val, idx) => (\r\n                            <Row key={idx} className='d-flex align-items-center' >\r\n                                <Col span={6} className='font-weight-normal d-flex align-items-center'> <Avatar src={val?.profile_pic} /> <span style={{ color: '#5f7087' }} className='font-weight-bold ml-2'>{val?.name}</span></Col>\r\n                                {/* <Col style={{ color: '#a0a3af' }} className='font-size-sm font-weight-semibold'>16 task on progress</Col> */}\r\n                            </Row>\r\n                        ))}\r\n                        {/* <Row className='d-flex align-items-center' >\r\n                            <Col span={6} className='font-weight-normal d-flex align-items-center'> <Avatar src='https://joesch.moe/api/v1/random?key=3' /> <span style={{color:'#5f7087'}} className='font-weight-bold ml-2'>Evergreen Hotel</span></Col>\r\n                            <Col style={{color:'#a0a3af'}} className='font-size-sm font-weight-semibold'>16 task on progress</Col>\r\n                        </Row>\r\n                        <Row className='d-flex align-items-center' >\r\n                            <Col span={6} className='font-weight-normal d-flex align-items-center'> <Avatar src='https://joesch.moe/api/v1/random?key=4' /> <span style={{color:'#5f7087'}} className='font-weight-bold ml-2'>Evergreen Hotel</span></Col>\r\n                            <Col style={{color:'#a0a3af'}} className='font-size-sm font-weight-semibold'>16 task on progress</Col>\r\n                        </Row>\r\n                        <Row className='d-flex align-items-center' >\r\n                            <Col span={6} className='font-weight-normal d-flex align-items-center'> <Avatar src='https://joesch.moe/api/v1/random?key=1' /> <span style={{color:'#5f7087'}} className='font-weight-bold ml-2'>Evergreen Hotel</span></Col>\r\n                            <Col style={{color:'#a0a3af'}} className='font-size-sm font-weight-semibold'>16 task on progress</Col>\r\n                        </Row> */}\r\n                    </div>\r\n                </Card>\r\n                {taskData?.task_status == 'Blocker' && <Card>\r\n                    <p className='mb-4 font-size-md font-weight-bold'>Blocker Remarks</p>\r\n                    <div className='mb-4'>\r\n                        <p className='font-weight-normal'>{taskData?.task_remark}</p>\r\n                    </div>\r\n                </Card>}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default JobSiteTaskDetails","import { Button, Card, Checkbox, Table, Tabs, Tag } from 'antd'\r\nimport PageHeading from 'components/shared-components/PageHeading/PageHeading'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { VisibilityIcon, DeleteIcon, EditIcon, PageIcon, Building, LocationIcon, DocIcon, MessageIcon } from \"assets/svg/ActionsSvg\";\r\n// import Icon from 'components/util-components/Icon';\r\nimport Icon from \"@ant-design/icons\"\r\nimport axios from 'axios';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nfunction ViewTask() {\r\n\r\n    const param = useParams()\r\n\r\n    const [contractData, setContractData] = useState({})\r\n    const [taskReportData, setTaskReportData] = useState([])\r\n\r\n\r\n    const tok = localStorage.getItem('token')\r\n\r\n\r\n    const getContract = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task\",\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                id: param?.taskId\r\n            }\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                setContractData(response.data.data)\r\n                // setTotalJobSite(response.data.data.data)\r\n                // handleJobsiteChangeData(response.data.data.data[0].id)\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n\r\n    const getTaskReport = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task-reports\",\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                task_id: param?.taskId,\r\n                page_index: 1,\r\n                page_size: 10000000\r\n            }\r\n        }).then((response) => {\r\n\r\n            if (response.data.success) {\r\n                setTaskReportData(response.data.data.data)\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        getContract()\r\n        getTaskReport()\r\n    }, [])\r\n\r\n    const column = [\r\n        {\r\n            title: 'Report ID',\r\n            dataIndex: 'id',\r\n        },\r\n        {\r\n            title: 'Staff Name',\r\n            dataIndex: 'submitted_by_name',\r\n        },\r\n        {\r\n            title: \"Submission Date\",\r\n            dataIndex: \"created_at\",\r\n            render: (date) => {\r\n                return moment(date).format(\"DD-MM-YYYY\")\r\n            }\r\n        },\r\n        {\r\n            title: \"Report\",\r\n            dataIndex: \"report\",\r\n        },\r\n        {\r\n            title: \"Action\",\r\n            dataIndex: \"action\",\r\n            render: (text, record) => {\r\n                return (\r\n                    <div>\r\n                        <Link to={`/app/task-management/task/view-task-report/${param.taskId}/${record.user_id}`} className=\"d-flex align-items-center\">\r\n                            <Icon className=\"mr-2\" component={VisibilityIcon} />\r\n\r\n                        </Link>\r\n\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <>\r\n            <div className='d-flex justify-content-between'>\r\n                <PageHeading\r\n                    // icon={TaskManagement}\r\n                    title=\" Tasks Details\"\r\n                />\r\n                <div className=\"d-flex justify-content-between mb-3\">\r\n                    <div className=\" d-flex align-items-center justify-content-between\">\r\n\r\n                        {/* <Button className=\"d-flex align-items-center ml-2\" >\r\n                            View Task reports\r\n                        </Button> */}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                gap: \"10px\"\r\n            }}>\r\n                {/* <TaskTable searchText={searchText} /> */}\r\n                <Card style={{\r\n                    width: \"30%\",\r\n                    minHeight: \"700px\",\r\n                    overflowY: \"auto\"\r\n                }}>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\"\r\n                    }}>\r\n                        <div>TASK OVERVIEW\r\n                            {/* <span className=\"ml-2\" >\r\n                                <Icon component={EditIcon} />\r\n                            </span> */}\r\n                        </div>\r\n                        {\r\n\r\n                            // if (record.task_status === 'COMPLETED') return <span style={{ color: \"#00AB6F\", backgroundColor: \"#EDFFF9\", padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Completed</span>\r\n                            // else if (record.task_status === 'STARTED') return <span style={{ color: '#0077b6', backgroundColor: '#DEEFFF', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Started</span>\r\n                            // else if (record.task_status === 'PENDING') return <span style={{ color: '#F0A500', backgroundColor: '#FEF3DD', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Pending</span>\r\n                            // else return <span style={{ color: '#F53434', backgroundColor: '#FFF2F2', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>{record.task_status}</span>\r\n\r\n                            contractData.task_status === 'COMPLETED' ? <Tag color=\"success\">Completed</Tag> :\r\n                                contractData.task_status === 'STARTED' ? <Tag color=\"processing\">Started</Tag> :\r\n                                    contractData.task_status === 'PENDING' ? <Tag color=\"warning\">Pending</Tag> :\r\n                                        <Tag color=\"error\">{contractData.task_status}</Tag>\r\n\r\n                        }\r\n                    </div>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        gap: \"20px\",\r\n                        // justifyContent: \"space-between\",\r\n                        marginTop: \"20px\"\r\n\r\n                    }}>\r\n                        <div style={{\r\n                            height: \"100px\",\r\n                            width: \"32%\",\r\n                            color: \"#fff\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            flexDirection: \"column\",\r\n                            background: \"#297BF6\"\r\n                        }}>\r\n                            <div>{\r\n                                taskReportData.length\r\n                            }</div>\r\n                            <div>Task Reports</div>\r\n\r\n                        </div>\r\n                        <div style={{\r\n                            height: \"100px\",\r\n                            width: \"32%\",\r\n                            color: \"#fff\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            flexDirection: \"column\",\r\n                            background: \"#EC9900\"\r\n                        }}> <div>{\r\n                                    moment(contractData.task_end_date_time).diff(moment(), 'days')\r\n                            }</div>\r\n                            <div>Days Remain</div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div style={{\r\n                        marginTop: \"10px\",\r\n                        width: \"80%\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        flexDirection: \"column\",\r\n                        gap: \"10px\"\r\n                    }}>\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            gap: \"10px\",\r\n                            alignItems: \"center\"\r\n                        }}>\r\n                            <div><Icon component={Building} /></div>\r\n                            <div>{contractData.customer?.name} </div>\r\n                        </div>\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            gap: \"10px\",\r\n                            alignItems: \"center\"\r\n                        }}>\r\n                            <div><Icon component={LocationIcon} /></div>\r\n                            <div>{contractData.job_site?.address} </div>\r\n                        </div>\r\n\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            gap: \"10px\",\r\n                            alignItems: \"center\"\r\n                        }}>\r\n                            <div><Icon component={DocIcon} /></div>\r\n                            <div>{contractData.task_name}</div>\r\n                        </div>\r\n\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            gap: \"10px\",\r\n                            alignItems: \"center\"\r\n                        }}>\r\n                            <div><Icon component={MessageIcon} /></div>\r\n                            <div>{contractData.task_description}</div>\r\n                        </div>\r\n\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            gap: \"10px\",\r\n                            // alignItems: \"center\",\r\n                        }}>\r\n                            <div><Icon component={DocIcon} /></div>\r\n                            <div>\r\n                                <div>Staff Assigned</div>\r\n                                {\r\n                                    contractData.users?.map((staff, index) => {\r\n                                        return (\r\n                                            <div style={{\r\n                                                fontWeight: \"bold\",\r\n                                                marginTop: \"5px\"\r\n                                            }} key={index}>{staff.name}</div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n                <Card style={{\r\n                    width: \"70%\"\r\n                }}>\r\n                    <Tabs>\r\n                        <Tabs.TabPane tab=\"Task Details\" key=\"1\">\r\n                            <Card title=\"Checklist\" style={{\r\n                                minHeight: \"300px\",\r\n                                overflowY: \"auto\"\r\n                            }}>\r\n                                <div style={{\r\n                                    display: \"flex\",\r\n                                    gap: \"10px\",\r\n                                    flexDirection: \"column\"\r\n\r\n                                }}>\r\n                                    {\r\n                                        contractData.check_list?.map((checklist, index) => {\r\n                                            return (\r\n                                                <div style={{\r\n                                                    background: \"#FBFBFB\",\r\n                                                    padding: \"10px\"\r\n                                                }} key={index}>\r\n                                                    <Checkbox disabled style={{\r\n                                                        marginRight: \"10px\"\r\n                                                    }}></Checkbox>{checklist.text}\r\n                                                </div>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </Card>\r\n\r\n                            <Card title=\"Task TIMELINE\" style={{\r\n                                minHeight: \"300px\",\r\n                                overflowY: \"auto\"\r\n                            }}>\r\n                                <div style={{\r\n                                    display: \"flex\",\r\n                                    gap: \"100px\",\r\n                                    flexDirection: \"row\"\r\n\r\n                                }}>\r\n                                    <div style={{\r\n                                        display: \"flex\",\r\n                                        flexDirection: \"column\",\r\n                                        gap: \"10px\"\r\n                                    }}>\r\n\r\n                                        <div>Task Type</div>\r\n                                        <div>Start Date</div>\r\n                                        <div>End Date</div>\r\n                                        <div>Task Time</div>\r\n                                        <div>Recur Forever</div>\r\n                                        <div>Skip Weekends</div>\r\n                                    </div>\r\n                                    <div style={{\r\n                                        display: \"flex\",\r\n                                        flexDirection: \"column\",\r\n                                        gap: \"10px\"\r\n                                    }}>\r\n                                        <div>Need to check</div>\r\n                                        <div>{contractData.task_start_date_time && moment(contractData.task_start_date_time).format(\"DD-MM-YYYY\")}</div>\r\n                                        <div>{contractData.task_end_date_time && moment(contractData.task_end_date_time).format(\"DD-MM-YYYY\")}</div>\r\n                                        <div>{moment(contractData.task_start_date_time).format(\"HH:mm a\")} -\r\n                                            {moment(contractData.task_end_date_time).format(\"HH:mm a\")}</div>\r\n                                        <div>\r\n                                            {contractData.recur_forever ? \"Yes\" : \"No\"}\r\n                                        </div>\r\n                                        <div>\r\n                                            {contractData.skip_weekends ? \"Yes\" : \"No\"}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card>\r\n                        </Tabs.TabPane>\r\n                        <Tabs.TabPane tab=\"Task Reports\" key=\"2\">\r\n                            <Table\r\n                                columns={column}\r\n                                dataSource={taskReportData}\r\n                            />\r\n                        </Tabs.TabPane>\r\n                    </Tabs>\r\n                </Card>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ViewTask","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"TaskReport_card__qTANt\",\"quotation-card\":\"TaskReport_quotation-card__vHKlD\",\"ant-card-body\":\"TaskReport_ant-card-body__4VKgr\",\"add_details\":\"TaskReport_add_details__jphbS\",\"total_amt\":\"TaskReport_total_amt__Qul-2\",\"tag\":\"TaskReport_tag__kJ6cl\",\"send_btn\":\"TaskReport_send_btn__Y48kd\",\"action\":\"TaskReport_action__0iNfd\"};","import { Button, Card, Checkbox, Col, Divider, List, Row, Table, Typography } from 'antd';\r\n\r\nimport axios from 'axios';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom'\r\nimport classes from \"./TaskReport.module.css\";\r\nimport PageHeading from 'components/shared-components/PageHeading/PageHeading';\r\nimport logo from \"assets/grand-energy-logo-small.png\";\r\n// import Icon from 'components/util-components/Icon';\r\nimport Icon from \"@ant-design/icons\"\r\nimport generatePDF, { Margin } from 'react-to-pdf';\r\nimport { PdfIcon } from 'views/app-views/ItemsAndServices/svgIcons';\r\nimport Todo from \"../../../../assets/check-list 1.png\"\r\nimport moment from 'moment';\r\nconst { Title, Text } = Typography;\r\n\r\nconst options = {\r\n    page: {\r\n        margin: Margin.SMALL,\r\n    }\r\n};\r\nfunction TaskReport() {\r\n    const history = useHistory()\r\n    const targetRef = useRef(null);\r\n    const [taskData, setTaskData] = useState({})\r\n    const [contractData, setContractData] = useState({})\r\n    const [tableData, setTableData] = useState([])\r\n    const param = useParams()\r\n    const tok = localStorage.getItem('token')\r\n    const getContract = (res) => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task\",\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                id: param?.taskId\r\n            }\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n                const userId = res.user_id\r\n                console.log(res.status)\r\n                // console.log(response.data.users.filter((item) => item.id === userId)[0].name)\r\n                setTableData(\r\n                    [\r\n                        {\r\n                            key: '1',\r\n                            report_by: response.data.data.users.filter((item) => item.id === userId)[0].name,\r\n                            customer: response.data.data?.customer?.name,\r\n                            job_site: response.data.data?.job_site?.name,\r\n                            start_date: response.data.data?.task_start_date_time ? moment(response.data.data?.task_start_date_time).format(\"DD-MM-YYYY\") : \"-\",\r\n                            end_date: response.data.data?.task_end_date_time ? moment(response.data.data?.task_end_date_time).format(\"DD-MM-YYYY\") : \"-\",\r\n                            time: moment(response.data.data?.task_start_date_time).format(\"hh:mm A\") + \" - \" + moment(response.data.data?.task_end_date_time).format(\"hh:mm A\"),\r\n                            task_status: res.status\r\n                        }\r\n                    ]\r\n                )\r\n                setTaskData({\r\n                    id: res.id,\r\n                    submitted_by: response.data.data.users.filter((item) => item.id === userId)[0].name,\r\n                    created_at: moment(res.created_at).format(\"DD-MM-YYYY\"),\r\n                    task_name: response.data.data.task_name,\r\n                    remarks: res.report,\r\n                    before_images: res.before_images,\r\n                    after_images: res.after_images,\r\n                    check_list: res.check_list\r\n                })\r\n                // setContractData(response.data.data)\r\n\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n    const getData = () => {\r\n        axios({\r\n            method: 'post',\r\n            url: \"/api/tc/get-task-report-by-task-and-user-id\",\r\n            headers: {\r\n                Authorization: `Bearer ${tok}`\r\n            },\r\n            data: {\r\n                task_id: param?.taskId,\r\n                user_id: param?.userId\r\n            }\r\n        }).then((response) => {\r\n            console.log(response.data)\r\n            if (response.data.success) {\r\n\r\n                setTaskData(response.data.data)\r\n                getContract(response.data.data)\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        // getContract()\r\n    }, [])\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: \"Report By\",\r\n            dataIndex: \"report_by\",\r\n        },\r\n        {\r\n            title: \"Customer\",\r\n            dataIndex: \"customer\",\r\n        },\r\n        {\r\n            title: \"Jobsite\",\r\n            dataIndex: \"job_site\",\r\n        },\r\n        {\r\n            title: \"Start Date\",\r\n            dataIndex: \"start_date\",\r\n        },\r\n        {\r\n            title: \"End Date\",\r\n            dataIndex: \"end_date\",\r\n        },\r\n\r\n        {\r\n            title: \"Time\",\r\n            dataIndex: \"time\",\r\n        },\r\n\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status',\r\n            render: (_, record) => {\r\n                if (record.task_status === 'COMPLETED') return <span style={{ color: \"#00AB6F\", backgroundColor: \"#EDFFF9\", padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Completed</span>\r\n                else if (record.task_status === 'STARTED') return <span style={{ color: '#0077b6', backgroundColor: '#DEEFFF', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Started</span>\r\n                else if (record.task_status === 'PENDING') return <span style={{ color: '#F0A500', backgroundColor: '#FEF3DD', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>Pending</span>\r\n                else return <span style={{ color: '#F53434', backgroundColor: '#FFF2F2', padding: '4px 8px', borderRadius: '6px', fontWeight: '600', fontSize: '14px' }}>{record.task_status}</span>\r\n            }\r\n        },\r\n    ]\r\n    return (\r\n        <React.Fragment>\r\n\r\n            {/* {showModal && <Modal onClose={showModalHandler}><SendQuotationModal/></Modal>} */}\r\n            <PageHeading\r\n                //   svg={ItemsAndServicesPageIcon}\r\n                title=\"Task Completion Report\"\r\n            />\r\n\r\n            <Card className=\"quotation-card\">\r\n                <div ref={targetRef}>\r\n                    <Card className={classes.card}>\r\n                        <div className=\"mt-2 mb-2 w-100\">\r\n                            <img src={logo} alt=\"logo\" style={{ width: '20%' }} />\r\n                            <div className=\"d-flex justify-content-between mt-3\">\r\n                                <div>\r\n                                    <Title strong level={3}>\r\n                                        GRAND ENERGY TECHNOLOGIES PTE LTD\r\n                                    </Title>\r\n                                    <Text><b>Email:</b> admin@getpl.com.sg</Text>\r\n                                </div>\r\n                                <div></div>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-between\">\r\n                                <div>\r\n                                    <Text><b>Phone:</b> 6025 3659</Text>\r\n                                    <br />\r\n                                    <Text><b>UEN/GST No:</b> 201802457D</Text>\r\n                                </div>\r\n                                <div className=\"text-right\">\r\n                                    <Text>Bik 130 Jurong Gateway Road </Text>\r\n                                    <br />\r\n                                    <Text>#03-203 Singapore 600130 </Text>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n\r\n\r\n\r\n\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        gap: \"20px\",\r\n                    }}>\r\n                        <div>\r\n                            <img src={Todo} />\r\n                        </div>\r\n                        <div>\r\n                            <div>Task Completion Report - #{taskData.id}</div>\r\n                            <div>Report Date: {taskData.created_at}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Table dataSource={tableData} columns={columns} pagination={false} />\r\n\r\n                    <div style={{\r\n                        marginTop: \"50px\",\r\n                    }}>\r\n                        <Title level={4}>Task Details</Title>\r\n                        <div>\r\n                            {taskData.task_name}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{\r\n                        marginTop: \"50px\",\r\n                    }}>\r\n                        <Title level={4}>Task Description</Title>\r\n                        <div>\r\n                            {taskData.remarks}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        marginTop: \"50px\",\r\n                    }}>\r\n                        <Title level={4}>Checklist</Title>\r\n                        <div>\r\n                            {\r\n                                taskData.check_list && taskData.check_list.map((item, index) => {\r\n                                    return (\r\n                                        <div key={index}>\r\n                                            <Checkbox checked={item.isChecked}>\r\n                                                <div style={{\r\n                                                    textDecoration: item.isChecked ? \"line-through\" : \"none\"\r\n                                                }}>\r\n                                                    {item.text}\r\n                                                </div>\r\n                                            </Checkbox>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div style={{\r\n                        marginTop: \"50px\",\r\n                    }}>\r\n                        <Title level={4}>Task Before Pictures</Title>\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            gap: \"20px\",\r\n                            flexWrap: \"wrap\",\r\n\r\n                        }}>\r\n                            {\r\n                                taskData.before_images && taskData.before_images.map((item, index) => {\r\n                                    return (\r\n                                        <div style={{\r\n                                            width: \"23%\",\r\n                                            height: \"400px\",\r\n\r\n                                        }} key={index}>\r\n                                            <img src={item.url} alt=\"task\" style={{ width: \"100%\", height: \"100%\", borderRadius: \"10px\" }} />\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div style={{\r\n                        marginTop: \"50px\",\r\n                    }}>\r\n                        <Title level={4}>Task After Pictures</Title>\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            gap: \"20px\",\r\n                            flexWrap: \"wrap\",\r\n\r\n                        }}>\r\n                            {\r\n                                taskData.after_images && taskData.after_images.map((item, index) => {\r\n                                    return (\r\n                                        <div style={{\r\n                                            width: \"23%\",\r\n                                            height: \"400px\",\r\n\r\n                                        }} key={index}>\r\n                                            <img src={item.url} alt=\"task\" style={{ width: \"100%\", height: \"100%\", borderRadius: \"10px\" }} />\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Divider />\r\n\r\n\r\n                    <div>Submitted By</div>\r\n                    <div style={{\r\n                        fontWeight: \"bold\",\r\n                    }}>\r\n                        {taskData.submitted_by}\r\n                    </div>\r\n                    <div>\r\n                        {moment().format(\"DD-MM-YYYY HH:mm A\")}\r\n                    </div>\r\n\r\n                </div>\r\n            </Card>\r\n\r\n            <div className={`d-flex justify-content-between ${classes.action}`}>\r\n                <div className=\"d-flex\">\r\n                    <Button className=\"mr-1\" onClick={() => { history.goBack() }}>\r\n                        Back\r\n                    </Button>\r\n\r\n                </div>\r\n                <Button onClick={() => {\r\n                    console.log(\"Downloading Quotation...\");\r\n                    generatePDF(targetRef, options, { filename: 'taskReport.pdf' });\r\n                }}>\r\n                    <Icon component={PdfIcon} />\r\n                    Download PDF\r\n                </Button>\r\n            </div>\r\n\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TaskReport","import React from 'react'\r\nimport { APP_PREFIX_PATH, AUTH_PREFIX_PATH } from 'configs/AppConfig'\r\nimport { Redirect, Route, useRouteMatch } from 'react-router-dom'\r\nimport Tasks from './Tasks/Tasks';\r\nimport Schedule from './Schedule/Schedule';\r\nimport JobSiteTasks from './Tasks/JobSiteTasks';\r\nimport AddNewTasks from './AddNewTasks';\r\nimport TaskCompletionReport from './Tasks/TaskCompletionReport';\r\nimport TaskCompletionReportInDetail from './Tasks/TaskCompletionReportInDetail';\r\nimport JobSiteTaskDetails from './Tasks/JobSiteTaskDetails';\r\nimport TaskReportPrint from 'components/layout-components/TaskReportPrint';\r\nimport ViewTask from './ViewDetail/ViewTask';\r\nimport TaskReport from './TaskReport/TaskReport';\r\n\r\n\r\nfunction CustomerManagement() {\r\n\r\n    const match = useRouteMatch();\r\n\r\n    return (\r\n        <div>\r\n            <Route path={`${APP_PREFIX_PATH}/task-management`} exact>\r\n                <Redirect to={`${match.path}/task`} />\r\n            </Route>\r\n            {/* <Route path={`${match.path}/task/:user_id`} exact>\r\n                <DailyAttendanceProfile />\r\n            </Route> */}\r\n            <Route path={`${match.path}/task/task-completion-reports/:id`} exact>\r\n                <TaskCompletionReport/>\r\n            </Route>\r\n            <Route path={`${match.path}/task/task-completion-report/:id`} exact>\r\n                <TaskCompletionReportInDetail/>\r\n            </Route>\r\n            <Route path={`${match.path}/task`} exact>\r\n                <Tasks/>\r\n            </Route>\r\n            {/* <Route path={`${match.path}/task/add-new/:jobSiteName/:customerName/:jobSiteId/:customerId/:jobSiteCount`} exact>\r\n                <AddNewTasks/>\r\n            </Route> */}\r\n            <Route path={`${match.path}/edit-task/:customerId/:jobSiteId/:contractId/:taskId`} exact>\r\n                <AddNewTasks/>\r\n            </Route>\r\n            <Route path={`${match.path}/add-task/:customerId/:jobSiteId/:contractId`} exact>\r\n                <AddNewTasks/>\r\n            </Route>\r\n            <Route path={`${match.path}/task/view-details/:customerId/:jobSiteId/:contractId/:taskId`} exact>\r\n                <ViewTask/>\r\n            </Route>\r\n            <Route path={`${match.path}/task/view-task-report/:taskId/:userId`} exact>\r\n                <TaskReport/>\r\n            </Route>\r\n            <Route path={`${match.path}/task/job-sites-tasks/:id`} exact>\r\n                <JobSiteTasks/>\r\n            </Route>\r\n            <Route path={`${match.path}/task/job-sites-tasks/:customerId/:jobSiteTaskId/:jobSiteCount`} exact>\r\n                <JobSiteTaskDetails/>\r\n            </Route>\r\n            <Route path={`${match.path}/schedule`} exact>\r\n                <Schedule/>\r\n            </Route>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomerManagement"],"names":["_useState","useState","_useState2","_slicedToArray","searchText","setSearchText","_useState3","_useState4","allContractsData","setAllContractsData","_useState5","_useState6","selectedCustomerFilter","setSelectedCustomerFilter","_useState7","_useState8","selectedJobsiteFilter","setSelectedJobsiteFilter","_useState9","_useState10","selectedStatusFilter","setSelectedStatusFilter","_useState11","_useState12","selectedFilter","setSelectedFilter","_useState13","_useState14","allJobsites","setAllJobsites","_useState15","_useState16","allCustomers","setAllCustomers","_useState17","_useState18","drawerIsOpen","setDrawerIsOpen","useEffect","axios","page_index","page_size","search","then","response","fdata","data","map","elem","index","_ref","key","id","customer_name","tc_customer_id","jobsite_name","job_site_name","contract_type","type","commence_on","moment","start_date","format","expire_on","end_date","_defineProperty","total_tasks","total_staffs","status","catch","error","console","log","method","url","customer_id","success","err","_jsxs","_Fragment","children","className","_jsx","PageHeading","title","SearchBox","Button","onClick","prevState","Icon","component","FilterIcon","CSVLink","headers","label","filename","src","exportIcon","alt","TaskTable","Drawer","placement","onClose","open","closable","visible","footer","style","color","previousState","Select","showSearch","placeholder","value","onChange","e","val","name","eventGuid","todayStr","Date","toISOString","replace","createEventId","String","weekendsVisible","currentsEvents","setCurrentsEvents","eventData","setEventData","tok","localStorage","getItem","history","useHistory","convertTo24HourTime","isoDateString","date","hours","getHours","toString","padStart","minutes","getMinutes","concat","handleEvents","events","getJobSiteIndex","cust_id","job_site_id","Authorization","findIndex","object","_step","respData","scheduleData","_iterator","_createForOfIteratorHelper","s","n","done","obj","task_start_date_time","task_name","start","end","task_end_date_time","contract_id","tc_contract_id","task_id","textColor","borderColor","tc_customer_job_site_id","serviceType","service_type","images","users","item","profile_pic","push","f","icon","TaskManagement","Card","FullCalendar","height","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","headerToolbar","left","center","right","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","select","selectInfo","view","calendar","startStr","endStr","allDonay","eventContent","eventInfo","startTime","event","endTime","extendedProps","styles","padding","width","borderRadius","eventClick","clickInfo","_def","task","eventsSet","eventChange","whiteSpace","overflow","textOverflow","param","useParams","currActiveKey","jobSiteTasksByCustomerIdData","setjobSiteTasksByCustomerIdData","contractData","setContractData","_useState19","_useState20","selectedStaffFilter","setSelectedStaffFilter","_useState21","_useState22","selectedTaskTypeFilter","setSelectedTaskTypeFilter","_useState23","_useState24","_useState25","_useState26","allStaff","setAllStaff","_useState27","_useState28","columns","dataIndex","render","text","toDateString","record","_","_record$staffs","Avatar","maxCount","maxPopoverTrigger","size","maxStyle","backgroundColor","cursor","staffs","i","task_status","fontWeight","fontSize","Action","onDelete","deleteJobsiteTasks","Id","CustomerName","_useState29","_useState30","_useState31","_useState32","setPage","_useState33","_useState34","cpage","setCpage","_useState35","_useState36","showDeletedSuccess","setShowDeletedSuccess","_useState37","_useState38","pre","filter","member","setTimeout","getContract","search_task","task_staff_assigned","task_type","tasks","Menu","Link","to","plusIcon","display","gap","customer_image","objectFit","flexDirection","toUpperCase","created_at","Table","scroll","x","dataSource","pagination","current","Modal","centered","onCancel","SuccessSubmit","Successfully","desc","Typography","location","useLocation","_Form$useForm","Form","form","edit","setEdit","taskCategoriesData","setTaskCategoriesData","recur_forever","setRecurForever","skip_weekends","setSkipWeekends","disabledDate","customDate","successMsg","setsuccessMsg","FileList","setFileList","uploadImage","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","imagesUrl","formData","wrap","_context2","prev","next","length","FormData","abrupt","append","originFileObj","stop","apply","arguments","finishHandler","_ref4","_callee3","imagesdata","newData","_context3","getFieldsValue","checkList","message","sent","_objectSpread","createTasks","taskId","UploadData","selectedItems","setSelectedItems","selectedTaskCategories","setSelectedTaskCategories","setStatus","setCheckList","startDateTime","setStartDateTime","_useState39","_useState40","endDateTime","setEndDateTime","_useState41","_useState42","allUsers","setAllUsers","_useState43","_useState44","endTaskCycleOn","setEndTaskCycleOn","values","customerId","jobSiteId","contractId","task_description","task_recurrence","msg","jobSiteCount","_useState45","_useState46","getSingleTask","setFieldsValue","user_ids","timeLine1","timeLine2","Boolean","endTaskDate","recur_until","task_category","task_category_id","slice","check_list","contractColumn","pathname","includes","ind","category_title","labelCol","span","layout","onFinish","Row","gutter","Col","Input","defaultValue","disabled","rules","required","rows","flex","mode","optionFilterProp","filterOption","input","option","_toString$toLowerCase","_option$title","toLowerCase","filterSort","optionA","optionB","_optionA$label","_optionB$label","localeCompare","idx","newCheckList","handleDeleteCheckList","DeleteIconRed","onPressEnter","target","_toConsumableArray","handeChecklist","DatePicker","dates","dateString","showTime","Radio","marginTop","flexWrap","buttonStyle","defaultChecked","Switch","checked","goBack","htmlType","submittedBy","img","avatar","submittedOn","remarks","jobCompletionData","setjobCompletionData","filteredValue","onFilter","report","submitted_by_image","submitted_by_name","updated_at","PageIcon","selectedRowKeys","setSelectedRowKeys","rowSelection","newSelectedRowKeys","statuses","_taskData$customer","_taskData$job_site","_taskData$job_site2","_taskData$job_site3","_taskData$job_site4","_taskData$job_site5","_taskData$job_site6","_taskData$job_site7","_taskData$job_site8","_taskData$users","taskData","setTaskData","customer","job_site","street_number","block_number","postal_code","country","JobCompletionReportTable","_taskReport$check_lis","_taskReport$before_im","_taskReport$after_ima","taskReport","setTaskReport","downloadingReport","setDownloadingReport","getReport","_response$data$data","tc_job_site_task_id","before_images","inputReadOnly","allowClear","maxWidth","RightIcon","after_images","PdfIcon","domain","window","hostname","protocol","dataDownload","loading","_taskData$customer2","_taskData$customer3","_taskData$check_list","_taskData$images","_taskData$before_imag","_taskData$after_image","isScheduleView","URLSearchParams","get","jobSiteTaskId","margin","background","paddingBottom","marginBottom","toGMTString","task_remark","_contractData$custome","_contractData$job_sit","_contractData$users","_contractData$check_l","taskReportData","setTaskReportData","column","user_id","VisibilityIcon","justifyContent","minHeight","overflowY","Tag","alignItems","diff","Building","LocationIcon","address","DocIcon","MessageIcon","staff","Tabs","tab","checklist","Checkbox","marginRight","Title","Text","options","page","Margin","targetRef","useRef","tableData","setTableData","getData","userId","res","_response$data$data$c","_response$data$data2","_response$data$data2$","_response$data$data3","_response$data$data4","_response$data$data5","_response$data$data6","_response$data$data7","_response$data$data8","report_by","time","submitted_by","React","ref","classes","logo","strong","level","Todo","isChecked","textDecoration","Divider","generatePDF","match","useRouteMatch","Route","path","APP_PREFIX_PATH","exact","Redirect","TaskCompletionReport","TaskCompletionReportInDetail","Tasks","AddNewTasks","ViewTask","TaskReport","JobSiteTasks","JobSiteTaskDetails","Schedule"],"sourceRoot":""}